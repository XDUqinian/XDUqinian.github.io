<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mondrian算法与差分隐私</title>
    <url>/2022/05/27/K-Anonymity-Diff/</url>
    <content><![CDATA[<p>K匿名保证存储在发布数据集中的每条个体记录对于敏感属性不能与其他的K-1个个体相区分，通俗的说就是同一个准标识符集至少要有K条记录，因此观察者无法通过准标识符集链接记录。差分隐私需要做到的就是攻击者的知识不会因为新样本的出现或消失而发生变化。</p>
<span id="more"></span>
<p>传送门：<a href="https://github.com/XDUqinian/K-Anonymity-Diff">开源仓库</a></p>
<h1 id="k匿名算法"><a class="markdownIt-Anchor" href="#k匿名算法"></a> K匿名算法</h1>
<p><strong>标识符</strong>：可以直接确定一个个体，如身份证号、姓名等。</p>
<p><strong>准标识符集</strong>：可以和外部表链接来识别个体的最小属性集，如邮编、生日、性别等。</p>
<p><strong>敏感数据</strong>：用户不希望被人知道的数据，如薪水、疾病历史、购买偏好等。</p>
<p><strong>K-匿名技术</strong>可以保证存储在发布数据集中的每条个体记录对于敏感属性不能与其他的K-1个个体相区分，通俗的说就是同一个准标识符集至少要有K条记录，因此观察者无法通过准标识符集链接记录。</p>
<p><strong>K-匿名实施</strong>通常是通过<strong>概括</strong>和<strong>隐匿</strong>。概括指对数据进一步抽象描述，比如把年龄概括成年龄段。隐匿指隐藏数据的部分信息，比如邮政编码隐藏后几位。这么处理降低了数据的精度，使得每条记录与其他K-1条记录有完全相同的准标识符集，降低了链接攻击所导致的隐私泄露风险。</p>
<p><strong>K-匿名技术</strong>保证了：</p>
<ol>
<li>无法得知特定的人是否在公开的数据中</li>
<li>无法确定特定的人是否有某项敏感属性</li>
<li>无法确认某条数据对应哪个人</li>
</ol>
<p><strong>K-匿名的缺陷</strong>：虽然可以阻止身份信息的公开，但无法防止属性信息的公开，导致无法抵抗同质攻击、背景知识攻击、补充数据攻击等。</p>
<ol>
<li>同质攻击：K-匿名的敏感数据一样，则只要知道一个用户的准标识符集，就能知道该用户具有这个敏感数据。</li>
<li>背景攻击：通过用户的准标识符集确定用户所在的等价信息表，同时观察者通过背景知识了解到用户没有某一敏感数据，就可以用排除法得到用户的敏感数据。</li>
<li>补充数据攻击：当公开的数据有多种类型，若这些数据的K-匿名方法不同，那么攻击者可以通过关联多种数据推测用户信息。</li>
</ol>
<h1 id="差分隐私"><a class="markdownIt-Anchor" href="#差分隐私"></a> 差分隐私</h1>
<p><a href="https://www.bilibili.com/video/BV1Tk4y117uA?from=search&amp;seid=2914351004507868385">关于差分隐私的讲解</a></p>
<p>差分隐私需要做到的就是 <strong>攻击者的知识不会因为新样本的出现或消失而发生变化</strong>。</p>
<p>比如说一群人出去聚餐，已知总共10个人，有8个是现充，2个是单身狗，然后聚会到一半张三有事情走了，这时还剩下8个现充和1个单身狗，这样就暴露了张三是单身狗的事实。就没有做到差分隐私保护。</p>
<p><strong>相邻数据集</strong>：两个数据集有且仅有一条数据不一样，则二者互为相邻数据集。</p>
<p><strong>差分隐私的形式化定义</strong>：对于一个随机化算法，其分别作用于两个相邻数据集得到的两个输出分布难以区分。</p>
<p>通俗来说就是，如果该算法作用于任何相邻数据集，得到一个特定输出O的概率差不多，那么我们就说这个算法能达到差分隐私效果。观察者通过观察输出结果很难察觉出数据集的微小变化。</p>
<p><strong>一般做法</strong>：从一个不满足差分隐私的算法出发，往算法里适当加入一定噪声，使其输出满足差分隐私的要求。</p>
<h2 id="拉普拉斯机制"><a class="markdownIt-Anchor" href="#拉普拉斯机制"></a> 拉普拉斯机制</h2>
<p>假设发布一个数据集D中糖尿病患者的数目，修改D中任意一个病患的数据，查询结果最多会改变1。直观地说，如果能用噪声“掩盖”这种不大于1的改变，就能满足差分隐私。</p>
<p>可以向查询结果中加入一个服从拉普拉斯分布的噪声：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>λ</mi></mrow></mfrac><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi></mrow><mi>λ</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pdf(x)=\frac{1}{2\lambda}exp(-\frac{|x|}{\lambda})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight">x</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p>
<p>噪声参数 lambda 决定拉普拉斯分布的方差，噪声越大方差越大。</p>
<p>噪声参数取决于修改一个人的数据时，查询结果最大会改变多少(敏感度)。</p>
<h1 id="mondrian"><a class="markdownIt-Anchor" href="#mondrian"></a> Mondrian</h1>
<p><strong>等价类</strong>：表T由多组元组组成。 T关于属性x1，…，xd的等价类是T中所有包含x1，…，xd的相同值(x1，…，xd)的元组的集合。 在SQL中，这类似于x1，…，xd上的group by查询。</p>
<h2 id="partitioning"><a class="markdownIt-Anchor" href="#partitioning"></a> Partitioning</h2>
<p>整个数据集分区肯定是符合K-匿名的。</p>
<p>算法过程就是不断将符合K-匿名的分区再进行细分，直到分区不能按列中值划分成更小的K-匿名分区为止。</p>
<p><strong>算法如下</strong>：</p>
<ol>
<li>初始化结果集为空集。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>s</mi><mi>h</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">P_{finished}=[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mclose">]</span></span></span></span></li>
<li>初始化工作集为一个原数据集的分区。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>w</mi><mi>o</mi><mi>r</mi><mi>k</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">P_{working}=[[1,2,…,N]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span></li>
<li>当工作集非空时，从工作集中取出一个分区：
<ul>
<li>计算该分区中所有列的相对跨度（就是有多少种取值再除以总的规模）</li>
<li>对分区中的列按相对跨度降序排序，然后遍历这些列。对遍历到的那一列：
<ul>
<li>用该列的中值的位置将分区划分为两个新分区。</li>
<li>判断新的分区是否符合K-匿名要求：
<ul>
<li>若符合，将两个新分区加入工作集中，退出循环。</li>
<li>若不符合，继续遍历下一个列。</li>
</ul>
</li>
</ul>
</li>
<li>如果没有一个列能有效划分(符合K-匿名)，就不再细分该分区，将该分区加入结果集中。</li>
</ul>
</li>
<li>返回结果集。</li>
</ol>
<h2 id="data-aggregation"><a class="markdownIt-Anchor" href="#data-aggregation"></a> Data Aggregation</h2>
<p>获得分区后，还要对数据进行聚合。可以将数值聚合为它们的范围或平均值，将分类属性聚合为它们的联合。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>K匿名</tag>
        <tag>差分隐私</tag>
      </tags>
  </entry>
  <entry>
    <title>第七届团体程序设计天梯赛</title>
    <url>/2022/04/05/CodingLog/</url>
    <content><![CDATA[<p>国三啦！</p>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/05/CodingLog/1.png" alt></p>
<span id="more"></span>
<h1 id="赛后感想"><a class="markdownIt-Anchor" href="#赛后感想"></a> 赛后感想</h1>
<p>今年整体来讲题目确实是比去年要难一点，L1做到后面就开始有点思维了，看到L2-3和L3-1以后就果断放弃拿国二的想法，好在运气好最后拿了个国三。总之，不打铁就算成功！</p>
<ul>
<li>L1-1输出一句话，L1-2整数除法，这种5分水题就没啥好说了。</li>
<li>L1-3条件分支，一开始把输入的两个年龄比大小换了一下，拿了7分，后来发现要按输入的顺序输出，最后写完L1-8才重新改回来。难度倒是不大，就是有点麻烦，得静下心来。</li>
<li>L1-4是啥忘记了，就记得当时一遍就莽过去了。</li>
<li>L1-5好像是丢骰子的题，直接记录出现过的点数写个循环。</li>
<li>L1-6字符串，给了伪代码，读懂题意后就直接莽过去。</li>
<li>L1-7看了眼数据有十万，开二维数组显然不现实，就给每一行每一列设计一个标记（做过八皇后的话对这种套路应该不陌生），最后记录被boss放过技能的行数和列数，然后输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>m</mi><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mn>1</mn><mo>∗</mo><mi>m</mi><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mn>2</mn><mo>∗</mo><mi>n</mi><mo>+</mo><mi>c</mi><mi>n</mi><mi>t</mi><mn>1</mn><mo>∗</mo><mi>c</mi><mi>n</mi><mi>t</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n*m-cnt1*m-cnt2*n+cnt1*cnt2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">2</span></span></span></span>。总数减去行格数减去列格数再加上重复部分。</li>
<li>L1-8一开始还以为是排序题，后来发现只要是天梯赛175及以上且PAT分数达标的第一次就会被推过去，所以就先记下这部分人数，然后对175分及以上但PAT分数不够的用map记下来，然后k次迭代遍历map计数，就得出了答案。</li>
<li>L2-1松针，和去年的包装机差不多，一个队列推松针，一个栈临时存松针，就一个比较繁琐的模拟，要注意各种边界条件。</li>
<li>L2-2排序题，最后加上00:00:00和23:59:59，再处理一下输出就行。</li>
<li>L2-4大众情人，要求找异性缘最大的男性和女性，其实就是找在异性眼中最大距离最小的男性和女性。用Floyd就可以求出两两之间的距离，不过要注意这是有向图。最后就找答案输出。</li>
<li>L3-1据说正解是拓扑排序，那时候在想怎么存两个字符串的大小关系，搞了半天没调出来直接开摆，就写了n=1的情况，拿了一分。</li>
<li>L2-3最后十五分钟想出来暴搜且返回根结点，最后再减去最深的那段路径，但是来不及了。</li>
</ul>
<p>拿个奖退役，还行。</p>
<h1 id="注意的东西"><a class="markdownIt-Anchor" href="#注意的东西"></a> 注意的东西</h1>
<ol>
<li>
<p>如果选择对输入一个个读入，循环体不能随便break，因为可能会导致该询问的输出 输出到下个询问。</p>
</li>
<li>
<p>比较麻烦的字符串处理题，可以先考虑简化版怎么处理，再加上特殊判断。</p>
</li>
<li>
<p>结构体重载运算符作比较时，可以再写一个比较函数cmp进行基本比较，然后再在重载运算符里写总的比较规则，遇到重复的基本比较时就可以调用cmp，简化了代码。</p>
</li>
<li>
<p>优先队列默认大根堆，小根堆要修改。<strong>小根堆要重载大于号，大根堆要重载小于号。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="comment">//可以记成 &lt;类型,&lt;存储方式&gt;,&lt;比较函数&gt; &gt;</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>;</span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,greater&lt;node&gt; &gt; coll;</span><br><span class="line"><span class="comment">//一样的道理，但是这个node只能是结构体，不能是define的定义</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>看清楚题目有没有说第一个是根，有没有说按顺序输入。没有的话，要注意。</p>
</li>
<li>
<p>pair的声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line">pis a=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">cout&lt;&lt;a.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a.second&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>完全二叉树用数组存储，只要知道任意四种遍历方式的一种，就可以给数组填上值构造出完全二叉树。</p>
</li>
<li>
<p><code>std::string</code> 的方法 <code>find</code>，返回值类型是<code>std::string::size_type</code>， 对应的是查找对象在字符串中的位置（从0开始），如果未查找到，该返回值是一个很大的数据（4294967295），判断时与 <code>std::string::npos </code>进行对比。</p>
</li>
<li>
<p>无穷大的定义<code>const int inf=0x3f3f3f3f;</code></p>
</li>
<li>
<p>L2 的题先想明白思路，规划好怎么写，再开始写。</p>
</li>
<li>
<p>看清楚题目给出的每个量的数据范围，是不是正数，是不是整数，这些很重要。</p>
</li>
<li>
<p>是小于还是大于还是小于等于还是大于等于还是等于还是不等于，想清楚。</p>
</li>
<li>
<p><code>printf(&quot;%.2lf\n&quot;,ans)</code>保留两位小数，四舍六入五成双。若五后有大于0的有效数字，五入，否则看五前面是奇数还是偶数，凑偶。所以说保留整数时，用强制类型转换，因为强转是截断式的。要四舍五入时，就加0.5再强转。</p>
</li>
<li>
<p>求是否有公共祖先时，可以把祖先放到set里，如果放进去set大小不变说明有重复，就说明有公共祖先。</p>
</li>
<li>
<p>五代以内没有公共祖先的意思是各自的四代都没有对方的祖先，对方的祖先可以不在四代以内。</p>
</li>
<li>
<p>cin cout 加速</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cin cout 的加速</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="字符串处理"><a class="markdownIt-Anchor" href="#字符串处理"></a> 字符串处理</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//str的pos位置前插入str1,注意若pos是循环的下表，pos要加上插入字符串的长度</span></span><br><span class="line">str.<span class="built_in">insert</span>(pos,str1);</span><br><span class="line"><span class="comment">//返回从str的pos开始长度为len的子串，记得前面要加个str=，不然相当于啥也没干</span></span><br><span class="line">str=str.<span class="built_in">substr</span>(pos,len);</span><br><span class="line"><span class="comment">//创建一个输入流ss，内容是str</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(ss&gt;&gt;str)</span><br><span class="line"><span class="comment">//把字母变成小写</span></span><br><span class="line"><span class="built_in">tolower</span>(<span class="type">char</span> x)</span><br><span class="line"><span class="comment">//返回从pos开始找str1的第一个位置    </span></span><br><span class="line">str.<span class="built_in">find</span>(pos,str1)</span><br></pre></td></tr></table></figure>
<h2 id="哈夫曼树和哈夫曼编码"><a class="markdownIt-Anchor" href="#哈夫曼树和哈夫曼编码"></a> 哈夫曼树和哈夫曼编码</h2>
<ol>
<li>哈夫曼树的带权路径长度 = 非叶子结点的权值之和。可以用小根堆计算。</li>
<li>判断哈夫曼编码的合法性：
<ul>
<li>带权路径和对不对。小根堆。</li>
<li>有无前缀。<code>str.find()</code></li>
</ul>
</li>
</ol>
<h2 id="迪杰特斯拉求单源最短路"><a class="markdownIt-Anchor" href="#迪杰特斯拉求单源最短路"></a> 迪杰特斯拉求单源最短路</h2>
<p><strong>问题</strong>：n个点，m条带权边，求从起点s到终点d的最短路径长度。</p>
<h3 id="二维数组存图"><a class="markdownIt-Anchor" href="#二维数组存图"></a> 二维数组存图</h3>
<ul>
<li>创建一个二维数组，初始化置为无穷大。<code>const int inf=0x3f3f3f3f;</code>
<ul>
<li><code>fill(e[0],e[0]+n*n,inf);</code></li>
</ul>
</li>
<li><code>dist[i]</code> 表示从源点s到图中各点的最短路径长度，<code>dist[i]</code>是在动态变化的，每迭代一次都会产生一个不会再变化的dist数据。n次迭代后得到最终的dist。dist初始化也置为正无穷，表示无穷远。</li>
<li><code>dist[s]=0;</code> 设置起点的最短路径就是0。</li>
<li><code>bool vis[i]</code>表示i点是否已经得到最短路径。因为每次迭代我们都会得到一个最短路径，所以我们每次都把得到最短路径的结点标记一下，表示加入已找到最短路径的集合S。</li>
<li>查找下一个点。遍历dist，找到离S最近的那个点，将其加入S。</li>
<li>关于新加入的结点u维护dist数组，对于不在S中的结点，若两点间有路径（即<code>e[u][v]!=inf</code>）,<code>if dist[v]&gt;dist[u]+e[u][v]  dist[v]=dist[u]+e[u][v]</code>。</li>
<li>最后我们就得到了一个dist数组，表示最短路径。</li>
<li><code>pre[i]</code>表示结点的最短路径的前驱结点，用于打印最短路径，写个递归就可以了。</li>
</ul>
<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805073643683840">紧急救援</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,d;</span><br><span class="line"><span class="type">int</span> w[<span class="number">505</span>],e[<span class="number">505</span>][<span class="number">505</span>],cnt1[<span class="number">505</span>],cnt2[<span class="number">505</span>],dist[<span class="number">505</span>],pre[<span class="number">505</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==s)&#123;</span><br><span class="line">		cout&lt;&lt;s;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(pre[x]);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d;</span><br><span class="line">	<span class="built_in">fill</span>(dist,dist+<span class="number">505</span>,inf);</span><br><span class="line">	<span class="built_in">fill</span>(e[<span class="number">0</span>],e[<span class="number">0</span>]+<span class="number">505</span>*<span class="number">505</span>,inf);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;w[i];</span><br><span class="line">	<span class="type">int</span> u,v,val;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;u&gt;&gt;v&gt;&gt;val;</span><br><span class="line">		e[u][v]=val;</span><br><span class="line">		e[v][u]=val;</span><br><span class="line">	&#125;</span><br><span class="line">	dist[s]=<span class="number">0</span>;</span><br><span class="line">	cnt1[s]=<span class="number">1</span>;</span><br><span class="line">	cnt2[s]=w[s];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		u=<span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> minn=inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;dist[j]&lt;minn)&#123;</span><br><span class="line">				minn=dist[j];</span><br><span class="line">				u=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">		vis[u]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;e[u][v]!=inf)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dist[v]&gt;dist[u]+e[u][v])&#123;</span><br><span class="line">					dist[v]=dist[u]+e[u][v];</span><br><span class="line">					cnt1[v]=cnt1[u];</span><br><span class="line">					cnt2[v]=cnt2[u]+w[v];</span><br><span class="line">					pre[v]=u;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dist[v]==dist[u]+e[u][v])&#123;</span><br><span class="line">					cnt1[v]=cnt1[v]+cnt1[u];</span><br><span class="line">					<span class="keyword">if</span>(cnt2[v]&lt;cnt2[u]+w[v])&#123;</span><br><span class="line">						cnt2[v]=cnt2[u]+w[v];</span><br><span class="line">						pre[v]=u;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;cnt1[d]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cnt2[d]&lt;&lt;endl;</span><br><span class="line">	<span class="built_in">print</span>(d);</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="set-和-vector"><a class="markdownIt-Anchor" href="#set-和-vector"></a> Set 和 Vector</h2>
<ol>
<li>声明一个vector数组，里面放的是一堆set。</li>
<li>输入数据时先生成set，再把集合push_back到vector中。</li>
<li>set的遍历，<code>auto it=s.begin();it!=s.end();it++</code>，这里的<code>auto</code>相当于<code>set&lt;int&gt;::iterator</code>，<code>it</code>是一个指针。</li>
<li><code>S.find(x)</code>返回一个指针，指向找到的元素的位置，如果找不到则返回<code>s.end()</code>。可以据此判断是否存在。</li>
<li>vector 向量，可以比较大小，有点字典序的意思。</li>
</ol>
<h2 id="map-和-multimap"><a class="markdownIt-Anchor" href="#map-和-multimap"></a> map 和 multimap</h2>
<p>c++ 中 map 不仅可以用于映射，还可以用于排序。</p>
<p>map的底层实现是红黑树，在存储的时候是按键值从小到大排序的。</p>
<p>对于多值的排序可以直接对vector排序，将vector作为map的键值，利用map自动排序，就不用结构体重载运算符啦。</p>
<p>特别是<strong>存在重复数据且重复数据不一起参与排序的情况下，用map来排序很不错</strong>。还可以<strong>利用map的映射性质对重复数量记录</strong>。</p>
<p>multimap不同于map的地方在于，map不允许相同的键值存在，而multimap允许，所以multimap也就没有了 [] 的操作。</p>
<p>multimap也是从小到大遍历的，可以用multimap作允许重复键值的排序，<strong>对于键值重复的项，按输入顺序排序</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">map&lt;vector&lt;<span class="type">int</span>&gt;,<span class="type">int</span>&gt; q;</span><br><span class="line">multimap&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	a.<span class="built_in">resize</span>(m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++) cin&gt;&gt;a[j];</span><br><span class="line">		q[a]++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it:q) ans.<span class="built_in">insert</span>(&#123;it.second,it.first&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it:ans)&#123;</span><br><span class="line">		cout&lt;&lt;it.first;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> it2:it.second) cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it2;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于大模拟"><a class="markdownIt-Anchor" href="#关于大模拟"></a> 关于大模拟</h2>
<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805054698012672">L2-028 秀恩爱分得快</a></p>
<p>10号打训练赛被这道大模拟给卡住了，这种东西没想清楚就上手真的很容易出奇怪的问题，就总结一下写大模拟的一些方法论。</p>
<p>首先最重要的是，读题目<strong>打草稿</strong>，不要上来就瞎打。通过打草稿理清思路，敲起代码来才能胸有成竹，调试的时候也可以有条不紊。</p>
<h3 id="如何读入如何输出"><a class="markdownIt-Anchor" href="#如何读入如何输出"></a> 如何读入？如何输出？</h3>
<p>有些大模拟题的读入和输出就会很复杂，要根据实际问题决定使用什么样的输入输出，有时候输入输出比较复杂的时候，可以考虑自己写<code>read()</code>和<code>print()</code>函数。</p>
<h3 id="如何存储输入的数据"><a class="markdownIt-Anchor" href="#如何存储输入的数据"></a> 如何存储输入的数据</h3>
<p>存储是很重要的，要考虑用什么样的数据结构，用什么样的存储结构来实现数据结构。不同的存储方式反映数据间关系的难易程度是不同的。对于一些复杂的实体，可以<code>struct</code>一个结构体，再在结构体内部定义我们需要的成员变量。在思考存储方式的时候可以适当联想之后我们要怎么实现任务，让存储方式有助于任务的实现。</p>
<h3 id="完成任务需要哪些步骤如何实现这些步骤"><a class="markdownIt-Anchor" href="#完成任务需要哪些步骤如何实现这些步骤"></a> 完成任务需要哪些步骤？如何实现这些步骤？</h3>
<p>在草稿纸上简单写一下解决问题的流程，可以用自然语言描述这些步骤。然后思考怎么用程序语言实现这些步骤。</p>
<p>这个过程相当于把一个任务放在了流水线上，将其分割成几个线性有序的步骤，然后逐个考虑每个步骤的实现。当每个步骤都实现了以后，整个任务就实现了。</p>
<p>对于一些比较复杂的步骤可以用函数封装起来，在写主流程的时候再调用，可以简化代码，有利于调试。</p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<h4 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h4>
<p>用<code>read</code>读取编号并处理性别，<code>vis</code>数组存储性别。</p>
<p>结构体 <code>photo</code>存放照片信息，分男女存，<code>cnt0</code>表示男性数量，<code>cnt1</code>表示女性数量，<code>num</code>表示总人数。</p>
<p>参数<code>maxa</code>和<code>maxb</code>表示a和b的最亲密异性的亲密值，<code>sumn</code>表示a和b的异性亲密值。</p>
<h4 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h4>
<ol>
<li>存储好数据。</li>
<li>对每张照片，如果照片中有a或b，就计算这张照片中a和b的异性亲密值。</li>
<li>找到a、b和异性的最大亲密值。</li>
<li>若a和b是彼此最亲密的人，输出为第一种情况。</li>
<li>否则，寻找最亲密的人，输出为第二种情况。</li>
</ol>
<p>上述流程一定是可以完成任务的。</p>
<p>为了简化流程，用自己写的<code>find</code>和 <code>count</code>函数完成 照片中是否有a或b的判断 和 异性亲密值的计算。</p>
<h4 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">photo</span>&#123;</span><br><span class="line">	<span class="type">int</span> num,cnt0,cnt1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; boy;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; girl;</span><br><span class="line">&#125;p[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> n,m,a,b,k;</span><br><span class="line"><span class="type">double</span> sumn[<span class="number">1005</span>],maxa,maxb;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">	string str;</span><br><span class="line">	cin&gt;&gt;str;</span><br><span class="line">	<span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">		flag=<span class="literal">true</span>;</span><br><span class="line">		str=str.<span class="built_in">substr</span>(<span class="number">1</span>,str.<span class="built_in">length</span>()<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">stringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">	<span class="type">int</span> res;</span><br><span class="line">	ss&gt;&gt;res;</span><br><span class="line">	vis[res]=flag;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(vis[x]) cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span>(vis[y]) cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(vis[x])&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p[i].cnt1;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(p[i].girl[j]==x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p[i].cnt0;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(p[i].boy[j]==x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(vis[x])&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p[i].cnt0;j++)&#123;</span><br><span class="line">			sumn[p[i].boy[j]]+=<span class="number">1.0</span>/p[i].num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p[i].cnt1;j++)&#123;</span><br><span class="line">			sumn[p[i].girl[j]]+=<span class="number">1.0</span>/p[i].num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;p[i].num;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p[i].num;j++)&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(vis[x])&#123;</span><br><span class="line">				p[i].girl.<span class="built_in">push_back</span>(x);</span><br><span class="line">				p[i].cnt1++;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				p[i].boy.<span class="built_in">push_back</span>(x);</span><br><span class="line">				p[i].cnt0++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	a=<span class="built_in">read</span>();b=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(a,i)) <span class="built_in">count</span>(a,i);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(b,i)) <span class="built_in">count</span>(b,i);</span><br><span class="line">	&#125;</span><br><span class="line">	maxa=<span class="number">-1</span>;maxb=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[a]!=vis[i]) maxa=<span class="built_in">max</span>(maxa,sumn[i]);</span><br><span class="line">		<span class="keyword">else</span> maxb=<span class="built_in">max</span>(maxb,sumn[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sumn[a]==maxb&amp;&amp;sumn[b]==maxa) <span class="built_in">print</span>(a,b);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[a]!=vis[i]&amp;&amp;maxa==sumn[i]) <span class="built_in">print</span>(a,i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[b]!=vis[i]&amp;&amp;maxb==sumn[i]) <span class="built_in">print</span>(b,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h2>
<p>说实话有些查找手写二分没必要，可以用<code>lower_bound()</code>和<code>upper_bound()</code>函数。当然手写二分的思路还是要有的。</p>
<p>可以把<code>bound</code>理解为等于的边界，这两个函数都表示下界，<code>lower_bound()</code>是大于等于，<code>upper_bound()</code>是大于。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> pos=<span class="built_in">upper_bound</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),x)-s.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure>
<p>返回值是一个地址，指向待符合要求的位置，所以要减去数组首地址成为下标。</p>
<p>查找范围是 左闭右开。不存在则返回 end 位置。</p>
<h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2>
<p>天梯赛好像就比较喜欢讨论家庭伦理，总是会出现家庭祖先这类的题目，有时候就得用上并查集的操作。</p>
<p>并查集数据结构并不难理解，说白了就是维护一个祖先数组<code>f[i]</code>，<code>int find(int x)</code>压缩路径，以及<code>Uinion(int x,int y)</code>合并两个集合。</p>
<p>实际应用上并查集还会有一些附加属性，比如同时维护一个并查集的大小(集合中的元素个数)，还有一些集合元素的总体值，这些值要怎么合并也是需要考虑的。</p>
<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805068539215872">家庭房产数</a></p>
<p>也是一道初看时没头绪的模拟题。通过做这道题也总结了一些问题的解决方法：</p>
<ol>
<li>编号不是从0或1开始的连续值时如何处理？</li>
<li>并查集合并过程中如果一个部分的一些需要合并的值还未录入，怎么用原地的办法让它最后能合并?</li>
</ol>
<p>关于第一个问题，最简单的办法就是直接开一个大数组，用题目给出的编号作为数组的下标。因为编号只有4位数其实还可以接受。</p>
<p>但是如果编号数特别长的话可以考虑用map进行映射，将题目中给定的编号和程序中实际存储的数组下标进行一个绑定。</p>
<p>这样做就可以直接通过题设编号来找到实际存储的位置。有时候这个编号要输出，所以编号要存在结构体里。</p>
<p>还有就是一个结点，给出和它有关系的结点编号，可能这个编号是不会在行首出现的，这时候我们就得看到一个，就构建一个映射关系，差不多就是这种操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//看到编号str时</span></span><br><span class="line">q[str]=cnt++</span><br></pre></td></tr></table></figure>
<p>然后第二个问题，涉及到并查集的合并操作。</p>
<p>意思就是一开始 n 个点，每个点都会有一个权值，也可能权值是0，我们在合并的时候，要把所有的值也合并到祖宗结点那里。</p>
<p>但是会有三种情况。</p>
<ol>
<li>
<p>先给各点权值，再给各点关系。</p>
<p>这种情况下就直接给各点赋值，然后在uinion里把值送过去就行了。比较简单。</p>
</li>
<li>
<p>先给出结点关系再给各点权值。</p>
<p>这种情况下就先建立关系，把并查集给创建好，然后把每个点的权值加到祖宗结点上。</p>
</li>
<li>
<p>给结点关系的过程中给各点权值。</p>
<p>这种情况就比较复杂，建立关系的时候可能点的权值已经给出了，就得在union里加起来，也可能没给，所以在给出点的权值的时候要加到祖宗去。所以两种操作都得写。因为一开始我们都会初始化各点祖宗是自己，所以就把值加到祖宗上，如果祖宗已经找好了就正好放到祖宗上，没找好就放自己身上，然后就会随着并查集的创建自动就都加好了。</p>
</li>
</ol>
<p>如果是用大数组直接把编号当下标，要设一个bool类型vis标记一下这个编号是否存在，因为初始化的时候直接所有都初始化了，就得标记一下。</p>
<p>然后这题的话主要就是一个维护并查集以及合并各种值的操作，别的排序和计数什么的都比较简单。</p>
<p>在用并查集的时候的一些思想，就假设一开始每个人都是一个家庭，然后家庭合并，就不用分人的结构体和家庭的结构体了。</p>
<p>不用图的搜索是因为这题个体之间的关系就是同在一个集合里，两两间的关系不考虑，没必要存图。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">//node family</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> cnt,minid;<span class="comment">//家庭人口数,最小成员编号 </span></span><br><span class="line">	<span class="type">double</span> sumn;<span class="comment">//总房产数 </span></span><br><span class="line">	<span class="type">double</span> area;<span class="comment">//总面积数</span></span><br><span class="line">	<span class="type">bool</span> vis;<span class="comment">//这个编号是否存在 </span></span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(node x,node y)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.area==y.area) <span class="keyword">return</span> x.minid&lt;y.minid;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> x.area&gt;y.area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[<span class="number">100005</span>];<span class="comment">//并查集</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x!=f[x]) <span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">	<span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> xid=<span class="built_in">find</span>(x);</span><br><span class="line">	<span class="type">int</span> yid=<span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(xid==yid) <span class="keyword">return</span>;</span><br><span class="line">	f[yid]=xid;</span><br><span class="line">	a[xid].cnt+=a[yid].cnt;</span><br><span class="line">	a[xid].sumn+=a[yid].sumn;</span><br><span class="line">	a[xid].area+=a[yid].area;</span><br><span class="line">	a[xid].minid=<span class="built_in">min</span>(a[xid].minid,a[yid].minid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(node x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.minid&lt;<span class="number">1000</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x.minid&lt;<span class="number">100</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x.minid&lt;<span class="number">10</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">	cout&lt;&lt;x.minid&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x.cnt&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.3lf %.3lf\n&quot;</span>,x.sumn,x.area);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100005</span>;i++) f[i]=i,a[i].cnt=<span class="number">1</span>,a[i].minid=i;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="type">int</span> id,fid,mid,k,sid,sumn;</span><br><span class="line">	<span class="type">double</span> area;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;id;</span><br><span class="line">		a[id].vis=<span class="literal">true</span>;</span><br><span class="line">		cin&gt;&gt;fid&gt;&gt;mid;</span><br><span class="line">		<span class="keyword">if</span>(fid!=<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[fid].vis=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">Union</span>(id,fid);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mid!=<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[mid].vis=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">Union</span>(id,mid);</span><br><span class="line">		&#125;</span><br><span class="line">		cin&gt;&gt;k;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;sid;</span><br><span class="line">			a[sid].vis=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">Union</span>(id,sid);</span><br><span class="line">		&#125;</span><br><span class="line">		cin&gt;&gt;sumn&gt;&gt;area;</span><br><span class="line">		a[f[id]].sumn+=sumn;</span><br><span class="line">		a[f[id]].area+=area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100005</span>;i++) <span class="built_in">find</span>(i);</span><br><span class="line">	<span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100005</span>;i++) <span class="keyword">if</span>(a[i].vis) s.<span class="built_in">insert</span>(f[i]);</span><br><span class="line">	cout&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	vector&lt;node&gt; ans;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it:s)</span><br><span class="line">	&#123;</span><br><span class="line">		a[it].area/=a[it].cnt;</span><br><span class="line">		a[it].sumn/=a[it].cnt*<span class="number">1.0</span>;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(a[it]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++) <span class="built_in">print</span>(ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二叉树的构建"><a class="markdownIt-Anchor" href="#二叉树的构建"></a> 二叉树的构建</h2>
<p>通过前序中序或中序后序构建二叉树。</p>
<p>也不是说不会，就是不太熟练，所以想来敲个板子。</p>
<p>命名规范一下，每次想名字都想好久。<code>p[i]</code>表示前序，<code>m[i]</code>表示中序,<code>b[i]</code>表示后序。从1开始存，默认0的位置位空结点，比较方便。写一个<code>int build()</code>函数返回根节点的下标。<code>l[i]</code>表示位置 i 的左孩子的位置,<code>r[i]</code>表示位置 i 的右孩子的位置。因为后序和前序的根结点比较好找，所以放的是前后序中的位置。只要调用一次<code>build</code>就把二叉树创建好了。</p>
<p>找中序的根结点位置，创建左右子树，返回根节点坐标。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> ml,<span class="type">int</span> mr,<span class="type">int</span> bl,<span class="type">int</span> br)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=ml;i&lt;=mr;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(m[i]==b[br])</span><br><span class="line">		&#123;</span><br><span class="line">			pos=i-ml;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos&gt;<span class="number">0</span>) l[br]=<span class="built_in">build</span>(ml,ml+pos<span class="number">-1</span>,bl,bl+pos<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(ml+pos&lt;mr) r[br]=<span class="built_in">build</span>(ml+pos+<span class="number">1</span>,mr,bl+pos,br<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> br;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2022/01/11/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>搭建博客过程中的一些问题以及解决方式。</p>
<span id="more"></span>
<p><img src="/common/img/loading.jpg" data-original="/2022/01/11/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png" alt="成功插入图片啦！"></p>
<h2 id="换成-butterfly">换成 butterfly</h2>
<p><strong>2023.11.12</strong></p>
<p>发现数学公式渲染不太对，改了一下。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo>=</mo><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi=\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span></p>
<p><a href="https://nickxu.me/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">hexo butterfly ktex</a></p>
<p>增加了对<mark>等号高亮</mark>的支持。</p>
<p><a href="https://blog.kukmoon.com/3eacfb91/">等号高亮</a></p>
<p><strong>2023.9.29</strong></p>
<p>想把博客弄得好看一点，改一个主题，发现这个主题的文档比较完善。</p>
<p><a href="https://butterfly.js.org/">hexo-butterfly 使用教程</a></p>
<p><a href="https://butterfly.zhheo.com/home.html">butterfly 魔改</a></p>
<p><strong>2023.9.30</strong></p>
<p>首页图片加载太慢了，加了个免费的图床。</p>
<p><a href="https://www.imagehub.cc/">知乎上搜到的 imagehub</a></p>
<h2 id="问题及解决方式">问题及解决方式</h2>
<ol>
<li>
<p>md 加不上图片。 <strong>解决方式</strong>：<a href="https://www.jianshu.com/p/f72aaad7b852">hexo插入图片</a>。</p>
</li>
<li>
<p>手机端的背景会被拉伸。<strong>解决方式</strong>：把背景放到header里，然后拉长head高度，设为absolute。</p>
</li>
<li>
<p>首页的文章显示全文而不是摘要。</p>
<p><strong>解决方法：</strong> 在文章中加上&lt; !–more-- &gt;标记 ，该标记以后部分就不在显示了，只有展开全部才显示，这是hexo定义的。</p>
</li>
<li>
<p>无法显示 markdown 的数学公式。</p>
<p><strong>解决方法</strong>：几个博客的方法都试了一遍，莫名其妙就好了。</p>
<p><a href="https://blog.csdn.net/yexiaohhjk/article/details/82526604">hexo next主题解决无法显示数学公式</a></p>
<p><a href="https://blog.csdn.net/weixin_43014927/article/details/99619627?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">在HEXO主题中添加数学公式支持</a></p>
<p><a href="https://blog.csdn.net/weixin_45511189/article/details/115798563?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-3-115798563.pc_agg_new_rank&amp;utm_term=hexo+next+%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F&amp;spm=1000.2123.3001.4430">hexo博客next主题添加对数学公式的支持</a></p>
</li>
<li>
<p>分页不显示封图。</p>
<p><strong>解决方法</strong>：在 images 的路径前加个/。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/w573719227/article/details/100704952">HEXO博客使用LeanCloud报错</a>。</p>
</li>
<li>
<p>无语，为什么部署到服务器以后的搜索框这么丑……可能要等一等？？？</p>
</li>
</ol>
<h2 id="实现的功能">实现的功能</h2>
<h3 id="一些小修改">一些小修改</h3>
<ul>
<li>
<p>将14号字体改为了16号。<a href="https://blog.csdn.net/dpdpdppp/article/details/102387532">hexo修改字体大小</a></p>
</li>
<li>
<p>将灰色字体改成了纯黑色。</p>
</li>
<li>
<p>文本框由灰色透明改为了纯白。</p>
</li>
<li>
<p>实现 markdown 行内数学公式的渲染。</p>
</li>
<li>
<p>文章页宽修改为900px。这篇教程往后拉：<a href="https://blog.csdn.net/weixin_33913377/article/details/91426006">修改文章页宽</a></p>
</li>
<li>
<p>修改文章底部#号标签为图标。</p>
<p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;</code>，将后面的内容换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。</p>
</li>
<li>
<p>将侧边栏弹出改为 always。改了半天才想起来，不成功是因为之前又设置了一个 nest.yml……捏马……</p>
</li>
<li>
<p>把背景图放在了header里，body 背景改为白灰色。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/gfl1427097103/article/details/104814979">修改首页文章间距并添加边框阴影</a>。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/weixin_33913377/article/details/91426006">修改了链接文字样式与 Read More样式</a>。</p>
</li>
<li>
<p>修改了<a href="https://blog.csdn.net/weixin_33913377/article/details/91426006">标签云颜色</a>。</p>
</li>
<li>
<p>将 github 的源改为中科大的源，网页加载优化，性能提升。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/tingqinxiyin/article/details/93494680">实现文章图片懒加载</a>。</p>
</li>
<li>
<p>文章背景与首页文章卡片设置圆角。</p>
</li>
<li>
<p>搜索结果框内部字体颜色改动。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_38747027/article/details/107967518">修改创建文章时的固定模板</a>。</p>
</li>
<li>
<p>修改菜单标签。<a href="https://blog.csdn.net/lijing742180/article/details/85622524#_39">配置主题菜单</a></p>
</li>
<li>
<p>可参考的一些修改。<a href="https://www.cnblogs.com/antmoe/p/12846393.html#%E5%89%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">优雅魔改</a></p>
</li>
<li>
<p>修改评论样式。<a href="https://blog.csdn.net/qq_42889280/article/details/103087637">评论框美化</a></p>
</li>
<li>
<p>Ctrl+Shift+c 可以看到网页某部分的源码位置。<a href="https://blog.csdn.net/wugenqiang/article/details/105744843">Hexo NexT 评论系统 Valine 的使用，详细版</a></p>
</li>
</ul>
<h3 id="一些功能">一些功能</h3>
<ul>
<li>将本地的markdown文本编辑器改成了 typroa，轻量级编辑器能够实时呈现最后的显示结果。<a href="https://jckling.github.io/2021/12/24/Other/Typora%20%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"> typroa 的激活教程</a>。</li>
<li>实现首页文章简介与封图设置，使首页更加简洁美观。</li>
<li>实现了文章分类和标签功能，便于根据需求找到想要的内容。</li>
<li>实现博客首页分页。<a href="https://blog.csdn.net/qq_43773164/article/details/106389652">hexo博客主页分页</a></li>
<li>页面点击小红心！csdn上说的都实现不了，最后从lq神的博客里扒到了github上的js。<a href="https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/dist/click-heart.min.js">click-heart!</a></li>
<li><a href="https://blog.csdn.net/weixin_39345384/article/details/80787998">文章阅读量统计</a>。</li>
<li><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373">文章末版权声明</a>。</li>
<li>添加了搜索功能。<a href="https://www.jianshu.com/p/d388119a90ec">hexo 搜索框</a></li>
<li>友情链接实现。<a href="https://zhuanlan.zhihu.com/p/384472746">友链</a></li>
<li>显示当前浏览进度。主题配置文件 b2t 和 scrollpercnet 修改为 true。</li>
<li>设置about的时候应该会用上。<a href="https://blog.csdn.net/hhh132/article/details/97029059">post-banner</a></li>
<li>简单的评论与回复系统。<a href="https://blog.csdn.net/blue_zy/article/details/79071414">hexo+Valine</a></li>
</ul>
<h3 id="待实现的功能与小任务">待实现的功能与小任务</h3>
<ul>
<li>站点信息显示：已运行时间等。</li>
<li>评论回复邮箱审核。</li>
<li>首页封图LazyLoading。</li>
<li>滚动条优化。</li>
<li>首页背景 scroll-down。</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Socket和DH密钥交换协议的远程文件安全传输</title>
    <url>/2022/04/02/RemoteSecureTransfer/</url>
    <content><![CDATA[<p>现代密码学基础技能实验，感觉挺有意思的，就简单记录一下。</p>
<p>2022.4.8 20:00</p>
<p>验收成功，9.8分，应该是最高分吧，哈哈。</p>
<span id="more"></span>
<h1 id="内容和要求"><a class="markdownIt-Anchor" href="#内容和要求"></a> 内容和要求</h1>
<ol>
<li>真实网络环境实现任意类型文件的远程传输。</li>
<li>采用socket进行网络传输。</li>
<li>支持任意类型的文件。</li>
<li>能够实现文件的正确加解密。</li>
<li>相同文件每次发送的加密文件不同。</li>
</ol>
<h1 id="一些原理"><a class="markdownIt-Anchor" href="#一些原理"></a> 一些原理</h1>
<h2 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> Socket</h2>
<h3 id="tcpip-udp"><a class="markdownIt-Anchor" href="#tcpip-udp"></a> TCP/IP UDP</h3>
<ul>
<li>TCP/IP：传输控制协议/网间协议，是为广域网设计的。</li>
<li>UDP：用户数据报协议，与 TCP 相对应。</li>
</ul>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/1.png" alt="1"></p>
<h3 id="socket-2"><a class="markdownIt-Anchor" href="#socket-2"></a> Socket</h3>
<p>Socket 是应用层与 TCP/IP 协议族通信的中间软件抽象层，是一组接口。</p>
<p>它把复杂的 TCP/IP 协议族隐藏在 Socket 接口后面，让 Socket 去组织数据，以符合指定的协议。</p>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/2.png" alt="2"></p>
<h4 id="交互"><a class="markdownIt-Anchor" href="#交互"></a> 交互</h4>
<p>服务器端初始化 Socket，与端口绑定 bind，对端口监听 listen，调用 accept 阻塞，等待客户端连接。若有个客户端初始化一个 Socket，连接服务器 connect，若成功就建立了连接。客户端发送数据请求，服务器端接收数据请求并处理，然后向客户端发送回应数据，客户端读取数据，最后关闭连接，一次交互结束。</p>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/3.png" alt="3"></p>
<h2 id="dh-密钥交换"><a class="markdownIt-Anchor" href="#dh-密钥交换"></a> DH 密钥交换</h2>
<p>理论依据：离散对数难解问题。</p>
<p>Alice 和 Bob需要共享一个对称密码的密钥，而不安全信道被 Eve 窃听。</p>
<p>Alice 和 Bob可以通过 DH 密钥交换，生成共享密钥。</p>
<ol>
<li>Alice 向 Bob 发送两个质数 P、G。
<ul>
<li><em>P 必须是大质数，G 是和 P 相关的数，称为生成元。</em></li>
<li><em>P 和 G 不需要保密，被窃听者窃听也没关系。</em></li>
</ul>
</li>
<li>Alice 生成随机数 A。
<ul>
<li><em>A 是一个1~P-2之间的整数，只有 Alice 知道。</em></li>
</ul>
</li>
<li>Alice 生成随机数 B。
<ul>
<li><em>B 是一个1~P-2之间的整数，只有 Bob 知道。</em></li>
</ul>
</li>
<li>Alice 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>G</mi><mi>A</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">G^{A}modP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> 发给 Bob。
<ul>
<li><em>被窃听者窃听也没关系。</em></li>
</ul>
</li>
<li>Bob 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>G</mi><mi>B</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">G^{B}modP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> 发给 Alice。
<ul>
<li><em>被窃听者窃听也没关系。</em></li>
</ul>
</li>
<li>通信双方计算密钥，得到相等的共享密钥。
<ul>
<li><em>Alice：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>G</mi><mi>B</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi><msup><mo stretchy="false">)</mo><mi>A</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi><mo>=</mo><msup><mi>G</mi><mrow><mi>A</mi><mi>B</mi></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">(G^BmodP)^AmodP=G^{AB}modP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></em>。</li>
<li><em>Bob：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>G</mi><mi>A</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi><msup><mo stretchy="false">)</mo><mi>B</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi><mo>=</mo><msup><mi>G</mi><mrow><mi>A</mi><mi>B</mi></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">(G^AmodP)^BmodP=G^{AB}modP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></em>。</li>
</ul>
</li>
</ol>
<p><a href="https://www.cnblogs.com/bjlhx/p/6563926.html">密钥交换/协商机制、迪菲-赫尔曼（DH）密钥交换</a></p>
<ol>
<li>甲方构建密钥对，公钥公布给乙方，私钥保留。双方约定数据加密算法。乙方通过甲方公钥构建密钥对，公钥公布给甲方，私钥保留。</li>
<li>甲方通过私钥和乙方公钥，用约定数据加密算法构建本地密钥，用本地密钥加密数据，发送给乙方。乙方使用私钥、甲方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥对数据解密。</li>
<li>乙方通过私钥和甲方公钥，用约定数据加密算法构建本地密钥，用本地密钥加密数据，发送给甲方。甲方使用私钥、乙方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥对数据解密。</li>
</ol>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/4.png" alt="4"></p>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/5.png" alt="5"></p>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/6.png" alt="6"></p>
<h1 id="实验开发"><a class="markdownIt-Anchor" href="#实验开发"></a> 实验开发</h1>
<h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2>
<p>eclipse上的Java开发。</p>
<h2 id="文件结构与效果图"><a class="markdownIt-Anchor" href="#文件结构与效果图"></a> 文件结构与效果图</h2>
<h3 id="文件结构"><a class="markdownIt-Anchor" href="#文件结构"></a> 文件结构</h3>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/7.png" alt="7"></p>
<h3 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h3>
<h4 id="主界面"><a class="markdownIt-Anchor" href="#主界面"></a> 主界面</h4>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/8.png" alt="8"></p>
<h4 id="文件选择"><a class="markdownIt-Anchor" href="#文件选择"></a> 文件选择</h4>
<p><img src="/common/img/loading.jpg" data-original="/2022/04/02/RemoteSecureTransfer/9.png" alt="9"></p>
<h2 id="功能实现"><a class="markdownIt-Anchor" href="#功能实现"></a> 功能实现</h2>
<ul>
<li>多线程提高程序效率。</li>
<li>文件选择的可视化操作。</li>
<li>时间戳+名称+扩展名的方式实现同一文件，传输不可覆盖。</li>
<li>传输文件扩展名实现任意类型的文件传输过程中不改变文件类型。</li>
<li>通过DH密钥协商AES密钥，实现文件的加解密。</li>
</ul>
<h2 id="服务端-server"><a class="markdownIt-Anchor" href="#服务端-server"></a> 服务端 Server</h2>
<ol>
<li>随机生成服务器端的公私钥对。</li>
<li>创建一个服务端 Socket 对象，和系统要指定的端口号。</li>
<li>使用 accept 方法获取到请求的客户端 Socket 对象。</li>
<li>创建 DataInputStream 对象，将服务器端的公钥发给客户端。</li>
<li>创建 DataOutputStream 对象，接收来自客户端的公钥。</li>
<li>通过客户端的公钥和服务器端的私钥生成本地密钥。</li>
<li>读取客户端发来的文件名。</li>
<li>创建 FileOutputStream 对象，保存客户端发来的加密文件。</li>
<li>写回上传成功。</li>
<li>对加密文件进行解密。</li>
<li>释放资源。</li>
</ol>
<h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> dh.AESFileUtil;</span><br><span class="line"><span class="keyword">import</span> dh.DHCoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//甲方公钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] publicKey1 ;  </span><br><span class="line">    <span class="comment">//乙方公钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] publicKey2;  </span><br><span class="line">    <span class="comment">//甲方私钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] privateKey1;  </span><br><span class="line">    <span class="comment">//甲方本地密钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] key1;  </span><br><span class="line">	</span><br><span class="line">    <span class="comment">//生成甲方密钥对</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;    </span><br><span class="line">        Map&lt;String, Object&gt; keyMap1 = DHCoder.initKey();  </span><br><span class="line">        publicKey1 = DHCoder.getPublicKey(keyMap1);  </span><br><span class="line">        privateKey1 = DHCoder.getPrivateKey(keyMap1);  </span><br><span class="line">        System.out.println(<span class="string">&quot;甲方公钥:\n&quot;</span> + Base64.encodeBase64String(publicKey1));  </span><br><span class="line">        System.out.println(<span class="string">&quot;甲方私钥:\n&quot;</span> + Base64.encodeBase64String(privateKey1));   </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//生成甲方本地密钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initMyKey</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			key1 = DHCoder.getSecretKey(publicKey2, privateKey1);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;甲方本地密钥:\n&quot;</span> + Base64.encodeBase64String(key1));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TCPServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			initKey();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//系统指定的端口号</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">		<span class="comment">//接收文件的相对路径</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">receive_file_path</span> <span class="operator">=</span> <span class="string">&quot;ReceiveFile&quot;</span>;</span><br><span class="line">		<span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(PORT);</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">			System.out.println(<span class="string">&quot;来访客户信息:\n&quot;</span> + <span class="string">&quot;客户端IP：&quot;</span> + socket.getInetAddress() </span><br><span class="line">			+ <span class="string">&quot; 客户端端口：&quot;</span> + socket.getInetAddress().getLocalHost() + <span class="string">&quot;已连接服务器&quot;</span>);</span><br><span class="line">			<span class="comment">//将公钥发给客户端</span></span><br><span class="line">	        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(socket.getOutputStream());</span><br><span class="line">	        dos.writeInt(publicKey1.length);</span><br><span class="line">	        dos.write(publicKey1);	</span><br><span class="line">	        <span class="comment">//接收客户端的公钥</span></span><br><span class="line">			DataInputStream dis=<span class="keyword">new</span> <span class="title class_">DataInputStream</span>(socket.getInputStream());</span><br><span class="line">			publicKey2 = <span class="keyword">new</span> <span class="title class_">byte</span>[dis.readInt()];</span><br><span class="line">			dis.readFully(publicKey2);</span><br><span class="line">			System.out.println(<span class="string">&quot;乙方公钥:\n&quot;</span> + Base64.encodeBase64String(publicKey2));</span><br><span class="line">			initMyKey();</span><br><span class="line">			<span class="comment">//读取文件名</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">receive_file_name</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">try</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">//构造待解密文件存放的路径</span></span><br><span class="line">						<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">						String decode_file_path=receive_file_path+File.separator+<span class="string">&quot;decode&quot;</span>+receive_file_name;</span><br><span class="line">						<span class="comment">//若路径不存在，创建文件夹</span></span><br><span class="line">						<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(receive_file_path);</span><br><span class="line">						<span class="keyword">if</span>(!file.exists())</span><br><span class="line">						&#123;</span><br><span class="line">							file.mkdir();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">//添加时间戳和扩展名</span></span><br><span class="line">						<span class="type">SimpleDateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">						<span class="type">String</span> <span class="variable">receive_file_path</span> <span class="operator">=</span> file + File.separator + df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + receive_file_name;</span><br><span class="line">						System.out.println(<span class="string">&quot;receive_file_name:&quot;</span> + receive_file_name);</span><br><span class="line">						System.out.println(<span class="string">&quot;receive_file_path:&quot;</span> + receive_file_path);</span><br><span class="line">						<span class="comment">//接收待解密文件</span></span><br><span class="line">						<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(decode_file_path);</span><br><span class="line">						<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">						<span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">						<span class="keyword">while</span>((len = is.read(bytes)) != -<span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">//告诉客户端上传成功</span></span><br><span class="line">						socket.getOutputStream().write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">						<span class="comment">//解密</span></span><br><span class="line">						AESFileUtil.decryptFile( decode_file_path,receive_file_path, Base64.encodeBase64String(key1));</span><br><span class="line">						<span class="comment">//资源释放</span></span><br><span class="line">						fos.close();</span><br><span class="line">						socket.close();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span>(IOException e)</span><br><span class="line">					&#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">TCPServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPServer</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="客户端-client"><a class="markdownIt-Anchor" href="#客户端-client"></a> 客户端 Client</h2>
<ol>
<li>创建一个客户端 Socket 对象，构造方法中绑定服务器的 IP 地址和端口号。</li>
<li>接收服务端发来的公钥，生成客户端的公私钥对和本地密钥。</li>
<li>将公钥发送给服务端。</li>
<li>将文件名发送给服务器端。</li>
<li>对待发送文件进行加密，发送加密后的文件。</li>
<li>读取服务器返回的数据。</li>
<li>释放资源。</li>
</ol>
<h3 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> dh.AESFileUtil;</span><br><span class="line"><span class="keyword">import</span> dh.DHCoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">	<span class="comment">//乙方公钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] publicKey2;  </span><br><span class="line">    <span class="comment">//乙方私钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] privateKey2;  </span><br><span class="line">    <span class="comment">//乙方密钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] key2; </span><br><span class="line">    <span class="comment">//甲方公钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] publicKey1;  </span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">TCPClient</span><span class="params">(String IP,<span class="type">int</span> PORT,String send_file_path,String send_file_name)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;</span><br><span class="line">		init(IP,PORT,send_file_path,send_file_name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//生成密钥</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initMyKey</span><span class="params">()</span></span><br><span class="line">	&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	Map&lt;String, Object&gt; keyMap2 = DHCoder.initKey(publicKey1);</span><br><span class="line">			publicKey2 = DHCoder.getPublicKey(keyMap2);</span><br><span class="line">			privateKey2 = DHCoder.getPrivateKey(keyMap2); </span><br><span class="line">			key2 = DHCoder.getSecretKey(publicKey1, privateKey2);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;  </span><br><span class="line">        System.out.println(<span class="string">&quot;乙方公钥:\n&quot;</span> + Base64.encodeBase64String(publicKey2));  </span><br><span class="line">        System.out.println(<span class="string">&quot;乙方私钥:\n&quot;</span> + Base64.encodeBase64String(privateKey2));</span><br><span class="line">        System.out.println(<span class="string">&quot;乙方本地密钥:\n&quot;</span> + Base64.encodeBase64String(key2));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(String IP,<span class="type">int</span> PORT,String send_file_path,String send_file_name)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;		</span><br><span class="line">		<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(IP,PORT);</span><br><span class="line">		<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//接收服务器端的公钥</span></span><br><span class="line">		DataInputStream dis=<span class="keyword">new</span> <span class="title class_">DataInputStream</span>(socket.getInputStream());</span><br><span class="line">		publicKey1 = <span class="keyword">new</span> <span class="title class_">byte</span>[dis.readInt()];</span><br><span class="line">		dis.readFully(publicKey1);</span><br><span class="line">		System.out.println(<span class="string">&quot;甲方公钥:\n&quot;</span> + Base64.encodeBase64String(publicKey1));</span><br><span class="line">		<span class="comment">//生成密钥</span></span><br><span class="line">		initMyKey();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			key2 = DHCoder.getSecretKey(publicKey1, privateKey2);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;乙方本地密钥:\n&quot;</span> + Base64.encodeBase64String(key2));</span><br><span class="line">		<span class="comment">//将公钥发给服务器端</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        dos.writeInt(publicKey2.length);</span><br><span class="line">        dos.write(publicKey2);</span><br><span class="line">		<span class="comment">//发送文件名</span></span><br><span class="line">		dos.writeUTF(send_file_name);</span><br><span class="line">		System.out.println(<span class="string">&quot;send_file_name:&quot;</span>+send_file_name);</span><br><span class="line">		<span class="comment">//加密文件的存储路径</span></span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(send_file_path);</span><br><span class="line">		String encode_file_path=String.valueOf(file.getParent())+File.separator+<span class="string">&quot;encode&quot;</span>+send_file_name;</span><br><span class="line">		System.out.println(encode_file_path);</span><br><span class="line">		<span class="comment">//加密</span></span><br><span class="line">		AESFileUtil.encryptFile(send_file_path, encode_file_path, Base64.encodeBase64String(key2));</span><br><span class="line">        <span class="comment">//发送加密文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(encode_file_path);</span><br><span class="line">		<span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">		<span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			os.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//告诉服务器已发送完毕</span></span><br><span class="line">		socket.shutdownOutput();</span><br><span class="line">		<span class="comment">//读取服务器返回的数据</span></span><br><span class="line">		<span class="keyword">while</span>((len = is.read(bytes)) != -<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">		fis.close();</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">TCPClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPClient</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>,<span class="string">&quot;sendFile/ttt.png&quot;</span>,<span class="string">&quot;ttt.png&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="公私钥和本地密钥的生成"><a class="markdownIt-Anchor" href="#公私钥和本地密钥的生成"></a> 公私钥和本地密钥的生成</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dh;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.security.Key;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;  </span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;  </span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;  </span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;  </span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyAgreement;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.interfaces.DHPrivateKey;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.interfaces.DHPublicKey;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DHParameterSpec;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DHCoder</span> &#123;  </span><br><span class="line">    <span class="comment">//非对称加密算法        </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;DH&quot;</span>;  </span><br><span class="line">    <span class="comment">//本地密钥算法，即对称加密算法   </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SELECT_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;  </span><br><span class="line">    <span class="comment">//密钥长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEY_SIZE</span> <span class="operator">=</span> <span class="number">512</span>;  </span><br><span class="line">    <span class="comment">//公钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;DHPublicKey&quot;</span>;  </span><br><span class="line">    <span class="comment">//私钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;DHPrivateKey&quot;</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//初始化甲方密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//实例化密钥对生成器  </span></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(KEY_ALGORITHM);  </span><br><span class="line">        <span class="comment">//初始化密钥对生成器  </span></span><br><span class="line">        keyPairGenerator.initialize(KEY_SIZE);  </span><br><span class="line">        <span class="comment">//生成密钥对  </span></span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.generateKeyPair();  </span><br><span class="line">        <span class="comment">//甲方公钥  </span></span><br><span class="line">        <span class="type">DHPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (DHPublicKey)keyPair.getPublic();  </span><br><span class="line">        <span class="comment">//甲方私钥  </span></span><br><span class="line">        <span class="type">DHPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (DHPrivateKey)keyPair.getPrivate();  </span><br><span class="line">        <span class="comment">//将密钥对存储在Map中  </span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);  </span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);  </span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);  </span><br><span class="line">        <span class="keyword">return</span> keyMap;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//初始化乙方密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">initKey</span><span class="params">(<span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//解析甲方公钥转换公钥材料  </span></span><br><span class="line">        <span class="type">X509EncodedKeySpec</span> <span class="variable">x509KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(key);  </span><br><span class="line">        <span class="comment">//实例化密钥工厂  </span></span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);  </span><br><span class="line">        <span class="comment">//产生公钥  </span></span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">pubKey</span> <span class="operator">=</span> keyFactory.generatePublic(x509KeySpec);  </span><br><span class="line">        <span class="comment">//由甲方公钥构建乙方密钥  </span></span><br><span class="line">        <span class="type">DHParameterSpec</span> <span class="variable">dhParameterSpec</span> <span class="operator">=</span> ((DHPublicKey)pubKey).getParams();  </span><br><span class="line">        <span class="comment">//实例化密钥对生成器  </span></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(KEY_ALGORITHM);  </span><br><span class="line">        <span class="comment">//初始化密钥对生成器  </span></span><br><span class="line">        keyPairGenerator.initialize(KEY_SIZE);  </span><br><span class="line">        <span class="comment">//产生密钥对  </span></span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.generateKeyPair();  </span><br><span class="line">        <span class="comment">//乙方公钥  </span></span><br><span class="line">        <span class="type">DHPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (DHPublicKey) keyPair.getPublic();  </span><br><span class="line">        <span class="comment">//乙方私约  </span></span><br><span class="line">        <span class="type">DHPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (DHPrivateKey) keyPair.getPrivate();  </span><br><span class="line">        <span class="comment">//将密钥对存储在Map中  </span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);  </span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);  </span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);  </span><br><span class="line">        <span class="keyword">return</span> keyMap;  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//构建密钥 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getSecretKey(<span class="type">byte</span>[] publicKey, <span class="type">byte</span>[] privateKey) <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//实例化密钥工厂  </span></span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);  </span><br><span class="line">        <span class="comment">//初始化公钥  </span></span><br><span class="line">        <span class="comment">//密钥材料转换  </span></span><br><span class="line">        <span class="type">X509EncodedKeySpec</span> <span class="variable">x509KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKey);  </span><br><span class="line">        <span class="comment">//产生公钥  </span></span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">pubKey</span> <span class="operator">=</span> keyFactory.generatePublic(x509KeySpec);  </span><br><span class="line">        <span class="comment">//初始化私钥  </span></span><br><span class="line">        <span class="comment">//密钥材料转换  </span></span><br><span class="line">        <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs8KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(privateKey);  </span><br><span class="line">        <span class="comment">//产生私钥  </span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">priKey</span> <span class="operator">=</span> keyFactory.generatePrivate(pkcs8KeySpec);  </span><br><span class="line">        <span class="comment">//实例化  </span></span><br><span class="line">        <span class="type">KeyAgreement</span> <span class="variable">keyAgree</span> <span class="operator">=</span> KeyAgreement.getInstance(keyFactory.getAlgorithm());  </span><br><span class="line">        <span class="comment">//初始化  </span></span><br><span class="line">        keyAgree.init(priKey);  </span><br><span class="line">        keyAgree.doPhase(pubKey, <span class="literal">true</span>);  </span><br><span class="line">        <span class="comment">//生成本地密钥  </span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> keyAgree.generateSecret(SELECT_ALGORITHM);  </span><br><span class="line">        <span class="keyword">return</span> secretKey.getEncoded();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//取私钥 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getPrivateKey(Map&lt;String, Object&gt; keyMap) <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> (Key) keyMap.get(PRIVATE_KEY);  </span><br><span class="line">        <span class="keyword">return</span> key.getEncoded();  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//取公钥   </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getPublicKey(Map&lt;String, Object&gt; keyMap) <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> (Key) keyMap.get(PUBLIC_KEY);  </span><br><span class="line">        <span class="keyword">return</span> key.getEncoded();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="文件加解密"><a class="markdownIt-Anchor" href="#文件加解密"></a> 文件加解密</h2>
<p><a href="http://www.blogjava.net/icewee/archive/2012/05/19/378556.html">Java AES文件加密</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.CipherInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.CipherOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AESFileUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;k+mmgEfezd8RNdmqmt9SfsV866Cjt0fADyDzZgolBGA=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cipher <span class="title function_">initAESCipher</span><span class="params">(String passsword, <span class="type">int</span> cipherMode)</span> &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> getKey(passsword);</span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS7Padding&quot;</span>);</span><br><span class="line">            cipher.init(cipherMode, key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cipher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SecretKey <span class="title function_">getKey</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">keyLength</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[keyLength / <span class="number">8</span>];</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Arrays.fill(keyBytes, (<span class="type">byte</span>) <span class="number">0x0</span>);</span><br><span class="line">            Security.addProvider(<span class="keyword">new</span> <span class="title class_">org</span>.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line">            <span class="type">byte</span>[] passwordBytes = password.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> passwordBytes.length &lt; keyBytes.length ? passwordBytes.length : keyBytes.length;</span><br><span class="line">            System.arraycopy(passwordBytes, <span class="number">0</span>, keyBytes, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">            key = <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(keyBytes, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//AES 加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">encryptFile</span><span class="params">(String encryptPath, String decryptPath, String sKey)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">encryptFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">decryptfile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CipherOutputStream</span> <span class="variable">cipherOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            encryptFile = <span class="keyword">new</span> <span class="title class_">File</span>(encryptPath);</span><br><span class="line">            <span class="keyword">if</span>(!encryptFile.exists()) &#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Encrypt file is empty&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            decryptfile = <span class="keyword">new</span> <span class="title class_">File</span>(decryptPath);</span><br><span class="line">            <span class="keyword">if</span>(decryptfile.exists()) &#123;</span><br><span class="line">                decryptfile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            decryptfile.createNewFile();</span><br><span class="line"></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> initAESCipher(sKey, Cipher.ENCRYPT_MODE);</span><br><span class="line">            cipherOutputStream = <span class="keyword">new</span> <span class="title class_">CipherOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(decryptfile), cipher);</span><br><span class="line">            bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(encryptFile));</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> bufferLength;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((bufferLength = bufferedInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                cipherOutputStream.write(buffer, <span class="number">0</span>, bufferLength);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line">            cipherOutputStream.close();</span><br><span class="line">            <span class="comment">//delFile(encryptPath);</span></span><br><span class="line">        &#125;  <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            delFile(decryptfile.getAbsolutePath());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//AES 解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">decryptFile</span><span class="params">(String encryptPath, String decryptPath, String mKey)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">encryptFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">decryptFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CipherInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            encryptFile = <span class="keyword">new</span> <span class="title class_">File</span>(encryptPath);</span><br><span class="line">            <span class="keyword">if</span>(!encryptFile.exists()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Decrypt file is empty&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            decryptFile = <span class="keyword">new</span> <span class="title class_">File</span>(decryptPath);</span><br><span class="line">            <span class="keyword">if</span>(decryptFile.exists()) &#123;</span><br><span class="line">                decryptFile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            decryptFile.createNewFile();</span><br><span class="line"></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> initAESCipher(mKey, Cipher.DECRYPT_MODE);</span><br><span class="line"></span><br><span class="line">            outputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(decryptFile));</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">CipherInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(encryptFile), cipher);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> bufferLength;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((bufferLength = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, bufferLength);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="comment">//delFile(encryptPath);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            delFile(decryptFile.getAbsolutePath());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delFile</span><span class="params">(String pathFile)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(pathFile == <span class="literal">null</span> &amp;&amp; pathFile.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;文件不能为空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathFile);</span><br><span class="line">            <span class="comment">// 路径为文件且不为空则进行删除</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> AESFileUtil.encryptFile</span><br><span class="line">                (<span class="string">&quot;SendFile/ttt.png&quot;</span>, <span class="string">&quot;SendFile/ttt.png&quot;</span>+<span class="string">&quot;&quot;</span>, key);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        flag = AESFileUtil.decryptFile</span><br><span class="line">                ( <span class="string">&quot;SendFile/加密后.txt&quot;</span>,<span class="string">&quot;SendFile/解密后.txt&quot;</span>, key);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1>
<p>本来想写python来着，不过如果没考上研究生的话大概率是要靠Java吃饭 QAQ……</p>
<p>(os：没有对象的面向对象编程)</p>
<p>小写一下练练手好了，感觉是比 python 跑得快一点。写了一天，还是比较有收获的，对dh协议还有socket有了更深刻的理解，也遇到了一些奇奇怪怪的bug，不过最后都解决了。</p>
<p>orz orz orz</p>
<p>打完明天下午的4c训练赛，就又可以继续泡馆子的生活。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>密码</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MSI协议的Cache一致性模拟器设计</title>
    <url>/2023/10/02/fake_cache/</url>
    <content><![CDATA[<p>前段时间我在研究怎么在 linux 环境下用 C++ 写一些东西，刚好就拿这个作业练练手。</p>
<p>老师要求用 C++ 实现一种基于 WB 策略的一致性维护的 Cache 模拟器，该模拟器仅考虑4核的 CPU，且每个核只有一级 Cache，Cache 行长度为 64 字节，观察 CPU读、写数据后各个核上 Cache 中数据状态的变化情况。</p>
<p>我思考了一下，准备分三步来完成这个任务：原理学习、程序设计、程序编写。</p>
<h1 id="一些原理"><a class="markdownIt-Anchor" href="#一些原理"></a> 一些原理</h1>
<p>首先要了解 Cache 一致性维护相关的知识。</p>
<p>其实本科学计组时讲过单机系统中的 Cache 一致性问题，但是单机系统中只考虑单个 Cache 与主存之间的数据不一致，通过直写法或回写法就可以简单地解决。而并行计算机体系结构中要考虑多处理机系统中的 Cache 一致性问题，需要考虑不同 Cache 之间、Cache 与主存之间的数据一致性，单纯的直写法或回写法并不能保证多处理机的多数据副本一致。</p>
<p>由于要求实现三状态的 Cache 一致性模拟，所以我先学了一下 MSI 协议。</p>
<h2 id="msi"><a class="markdownIt-Anchor" href="#msi"></a> MSI</h2>
<p>MSI 协议将 Cache 中的数据块分为三种状态：</p>
<ol>
<li><strong>S (Shared)</strong> 表示该数据块被共享，正确数据块分别在 Cache 和 Memory 中，或者在不同的 Cache 中。</li>
<li><strong>M (Modified)</strong> 表示该数据块在系统中唯一正确。</li>
<li><strong>I (Invalid)</strong> 表示该数据块无效。</li>
</ol>
<p>这三种状态之间的转换由四种操作来决定：</p>
<ul>
<li>
<p><strong>本地读</strong>：本地处理机对该数据块读。</p>
<ul>
<li>M：不变</li>
<li>S：不变</li>
<li>I：变 S</li>
</ul>
</li>
<li>
<p><strong>本地写</strong>：本地处理机对该数据块写。</p>
<ul>
<li>M：不变</li>
<li>S：变 M</li>
<li>I：变 M</li>
</ul>
</li>
<li>
<p><strong>远程读</strong>：远程处理机对该数据块读。</p>
<ul>
<li>M：变 S</li>
<li>S：不变</li>
<li>I：不变</li>
</ul>
</li>
<li>
<p><strong>远程写</strong>：远程处理机对该数据块写。</p>
<ul>
<li>M：变 I</li>
<li>S：变 I</li>
<li>I：不变</li>
</ul>
</li>
</ul>
<p>大概就长下面这样：</p>
<p><img src="/common/img/loading.jpg" data-original="/2023/10/02/fake_cache/MSI.jpg" alt="MSI 状态转移图"></p>
<h2 id="wb"><a class="markdownIt-Anchor" href="#wb"></a> WB</h2>
<p>在单机系统中，回写策略指被修改的 Cache 行只有在被替换时才将修改的内容写回内存中。而多机系统中的回写策略还要考虑 Cache 行与主存块的状态变化。这种变化在两种情形下发生，一种是 Cache 未命中时与主存替换，另一种是当无效的数据块被读取时，唯一正确数据写回主存并传递给无效数据块所在的 Cache。</p>
<p>当 Cache 未命中并发生替换时，写回对应主存块的状态变化如下：</p>
<ol>
<li>若 Cache 行的状态为 I，则无需写回。</li>
<li>若 Cache 行的状态为 M，则写回并将主存中对应块状态置为 M。</li>
<li>若 Cache 行的状态为 S，无需写回（共享状态下，主存中的数据也一定是正确的）。判断当前共享数量是否为1，若为1则将主存对应块状态置为 M。</li>
</ol>
<p>对于替换进 Cache 的数据块，考虑 Cache 行的状态：</p>
<ol>
<li>内存块为 M，则一起置 S。</li>
<li>内存块为 S，Cache 行置 S。</li>
<li>内存块为 I，Cache 行置 I。</li>
</ol>
<h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1>
<p>了解 Cache 一致性的原理之后，我就开始了程序的设计。因为重点是对协议的模拟，只需要模拟出状态的变化，无需实现数据的真实传输，同时我不想去实现复杂的替换策略，也不希望模拟太大的主存空间，于是我就大胆做出了如下假设：</p>
<ol>
<li>4个 Cache 都只包含 1 个 Cache 行。</li>
<li>主存地址范围 0~9。</li>
</ol>
<p>这样以来，我只需要实现一个 Cache 类、一个 Memory 类以及一个控制全局的 Controll 类即可。</p>
<h2 id="遇到的一些问题"><a class="markdownIt-Anchor" href="#遇到的一些问题"></a> 遇到的一些问题</h2>
<h3 id="继承中的构造函数"><a class="markdownIt-Anchor" href="#继承中的构造函数"></a> 继承中的构造函数</h3>
<p>我发现 Cache 类与 Memory 类有很多相似的地方，所以就写了一个 Device 父类做继承。但是在实现的过程中，发现子类的构造函数总是报错，上网搜了一圈才发现原因。</p>
<p>大致来说是因为父类的构造函数是不能被子类继承的，构造原则如下：</p>
<ol>
<li>如果子类没有定义构造方法，则调用父类的无参数构造方法。</li>
<li>如果子类定义了构造方法，在创建子类对象时，首先执行父类的无参数构造方法，然后再执行自己的构造方法。</li>
<li>如果父类只定义了有参数构造函数，子类的构造函数没有显示调用父类构造函数，则出错。也就是说如果父类只有有参数的构造方法，子类必须显示调用此带参构造方法。</li>
</ol>
<p>所以解决问题方法就是，父类同时定义带参构造方法以及空的无参构造方法，然后子类就可以定义自己的构造方法了。</p>
<h3 id="静态成员数组的访问"><a class="markdownIt-Anchor" href="#静态成员数组的访问"></a> 静态成员数组的访问</h3>
<p>最开始的时候，我写了一个表示状态的 Status 类，并在其中用 <code>constexpr static</code> 关键字定义了一个 <code>char</code> 类型的静态数组 <code>mp[]</code>，但是在后续使用的时候发现报错。</p>
<p>后来发现常量表达式(constexpr)在编译期就可以计算出结果，所以不能在数组中用变量下标，只能用常量下标。于是我就大笔一挥，把<code>constexpr</code>给去掉了。</p>
<h2 id="整体设计思路"><a class="markdownIt-Anchor" href="#整体设计思路"></a> 整体设计思路</h2>
<p>写一个控制器Controll，控制器通过<code>run()</code>方法运行，在<code>run()</code>方法中会要求用户输入要访问的 Cache 的 <code>id</code>、要进行的读或写操作<code>op</code>以及数据块的地址<code>address</code>，然后根据操作的不同调用<code>read()</code>或<code>write()</code>。上述被调用的两个方法在访问数据块时先通过<code>visit()</code>判断 Cache 是否命中，如果未命中则需要替换<code>change()</code>，然后再根据是本地读写或是远程读写来进行相应的状态变化。<code>run()</code>在最后会打印出各个 Cache 以及主存中的状态。</p>
<h3 id="status"><a class="markdownIt-Anchor" href="#status"></a> Status</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STATUS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STATUS_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Status</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> S=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> I=<span class="number">3</span>;</span><br><span class="line">        <span class="type">char</span> mp[<span class="number">4</span>]=&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;I&#x27;</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="device"><a class="markdownIt-Anchor" href="#device"></a> Device</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEVICE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">int</span> address;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Device</span>();</span><br><span class="line">        <span class="built_in">Device</span>(<span class="type">int</span> id,<span class="type">int</span> address,<span class="type">int</span> status);</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">get_address</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">char</span> <span class="title">get_status</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">toS</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">toI</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">toM</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="cache"><a class="markdownIt-Anchor" href="#cache"></a> Cache</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CACHE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CACHE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Device.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cache</span>:<span class="keyword">public</span> Device&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Cache</span>();</span><br><span class="line">        <span class="built_in">Cache</span>(<span class="type">int</span> id,<span class="type">int</span> address,<span class="type">int</span> status);</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">l_r</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">l_w</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">r_r</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">r_w</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">set_address</span><span class="params">(<span class="type">int</span> address)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">visit</span><span class="params">(<span class="type">int</span> address)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="memory"><a class="markdownIt-Anchor" href="#memory"></a> Memory</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MEMORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEMORY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Device.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span>:<span class="keyword">public</span> Device&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Memory</span>();</span><br><span class="line">        <span class="built_in">Memory</span>(<span class="type">int</span> id,<span class="type">int</span> address,<span class="type">int</span> status);</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">visit</span><span class="params">(<span class="type">int</span> address)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="controll"><a class="markdownIt-Anchor" href="#controll"></a> Controll</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CONTROLL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONTROLL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Status.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Cache.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Memory.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controll</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Cache c[<span class="number">4</span>];</span><br><span class="line">        Memory m[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> share[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Controll</span>();</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> address)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> address)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> cache_adr,<span class="type">int</span> mem_adr)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="test"><a class="markdownIt-Anchor" href="#test"></a> test</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Controll.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Controll ice;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) ice.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2>
<p><a href="https://github.com/XDUqinian/fake_cache">开源仓库</a></p>
<p>系统：<code>Linux ubuntu-20.04.6</code></p>
<p>需要安装 <code>gcc</code> <code>cmake</code></p>
<p><strong>运行</strong>:</p>
<p>到项目目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">./test</span><br></pre></td></tr></table></figure>
<p>随便敲了几个样例，感觉没什么问题。</p>
<p><code>w 1 1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">not hit!</span><br><span class="line">Cache 0: the status is I,the address is -1.</span><br><span class="line">Cache 1: the status is M,the address is 1.</span><br><span class="line">Cache 2: the status is I,the address is -1.</span><br><span class="line">Cache 3: the status is I,the address is -1.</span><br><span class="line">Memory 0  1  2  3  4  5  6  7  8  9  </span><br><span class="line">Status I  I  I  I  I  I  I  I  I  I  </span><br><span class="line">Share  0  1  0  0  0  0  0  0  0  0  </span><br></pre></td></tr></table></figure>
<p><code>w 1 2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">not hit!</span><br><span class="line">Cache 0: the status is I,the address is -1.</span><br><span class="line">Cache 1: the status is M,the address is 2.</span><br><span class="line">Cache 2: the status is I,the address is -1.</span><br><span class="line">Cache 3: the status is I,the address is -1.</span><br><span class="line">Memory 0  1  2  3  4  5  6  7  8  9  </span><br><span class="line">Status I  M  I  I  I  I  I  I  I  I  </span><br><span class="line">Share  0  1  1  0  0  0  0  0  0  0  </span><br></pre></td></tr></table></figure>
<p><code>w 0 1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">not hit!</span><br><span class="line">Cache 0: the status is M,the address is 1.</span><br><span class="line">Cache 1: the status is M,the address is 2.</span><br><span class="line">Cache 2: the status is I,the address is -1.</span><br><span class="line">Cache 3: the status is I,the address is -1.</span><br><span class="line">Memory 0  1  2  3  4  5  6  7  8  9  </span><br><span class="line">Status I  I  I  I  I  I  I  I  I  I  </span><br><span class="line">Share  0  1  1  0  0  0  0  0  0  0 </span><br></pre></td></tr></table></figure>
<p><code>r 3 2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">not hit!</span><br><span class="line">Cache 0: the status is M,the address is 1.</span><br><span class="line">Cache 1: the status is S,the address is 2.</span><br><span class="line">Cache 2: the status is I,the address is -1.</span><br><span class="line">Cache 3: the status is S,the address is 2.</span><br><span class="line">Memory 0  1  2  3  4  5  6  7  8  9  </span><br><span class="line">Status I  I  S  I  I  I  I  I  I  I  </span><br><span class="line">Share  0  1  3  0  0  0  0  0  0  0 </span><br></pre></td></tr></table></figure>
<h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1>
<p>这个作业还是比较好做的，其实可以不用C++多文件，整个项目下来可能有点繁琐，但是就是想试一试所以就这么写了。要求用文件读写的方式来做控制，但是还没实现，离 deadline 还有一个多月，到时候可以再补上。</p>
<p>其实一直以来我都是用 c++ 比较多，但是因为以前都在用 devc++ 写算法题，大三以后的课程作业基本都用 python 写了，所以对怎么用 C++ 写小实验还是比较陌生。算是弥补了一直以来的遗憾吧。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>基于go-cqhttp与python的qq机器人开发</title>
    <url>/2022/01/27/mybot/</url>
    <content><![CDATA[<p>大一的时候看到果果自己写了一个qq机器人，就想着什么时候自己也实现一个，刚好因为疫情的原因在宿舍封了两周，就动手实现一下自己久远的小愿望。</p>
<span id="more"></span>
<h1 id="开发环境配置"><a class="markdownIt-Anchor" href="#开发环境配置"></a> 开发环境配置</h1>
<p><strong>系统：</strong> Windows</p>
<p><strong>框架</strong>： go-cqhttp</p>
<p><strong>语言：</strong> python3.8</p>
<p><strong>编译器：</strong> Visual Studio Code</p>
<h2 id="go-cqhttp-框架下载和配置"><a class="markdownIt-Anchor" href="#go-cqhttp-框架下载和配置"></a> go-cqhttp 框架下载和配置</h2>
<h3 id="下载与配置"><a class="markdownIt-Anchor" href="#下载与配置"></a> 下载与配置</h3>
<p>qq机器人的框架是基于 mirai 以及 MiraiGo 开发的 <a href="https://docs.go-cqhttp.org/">go-cqhttp</a>。</p>
<p>到 Github上下载即可。<a href="https://github.com/Mrs4s/go-cqhttp/releases">下载链接</a></p>
<p>选择 go-cqhttp_windows_amd64.zip，下载并解压。</p>
<p>点击exe文件，出现小黑框后一路确定就行。</p>
<p>会生成一个 .bat批处理文件，点击它，在小黑框中选择 0：HTTP通信。</p>
<p>得到 comfig.yml 配置文件，打开并去掉最后两行前的#。</p>
<p>配置完成后，点击 go-cqhttp.bat 批处理文件就可以扫码登录机器人的qq号了。</p>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>
<p>这个框架就是一个实现收发消息的工具，相当于前后端之间的桥梁。</p>
<p>剩下的部分就是用python写出我们想要的逻辑，也就是后端。</p>
<h1 id="python实现功能"><a class="markdownIt-Anchor" href="#python实现功能"></a> python实现功能</h1>
<p>为了方便程序的再开发和管理，将后端分层。</p>
<p><strong>底层：</strong> 包括收发消息，从数据文件中写入或读出数据。</p>
<p><strong>字符串处理层：</strong> 处理传入的字符串，返回要发送的字符串。</p>
<p><strong>功能层：</strong> 实现一些特别的功能，如定时发送消息功能等。</p>
<p><strong>服务层：</strong> 字符串处理层的上一层，将不同特点的字符串进行不同的处理。</p>
<p><strong>domain层</strong>：实现一个msg_talker()类，将服务封装成它的方法，各种数据封装为它的属性。</p>
<p><strong>main函数</strong>：一个无限循环，用于最后的运行。</p>
<h3 id="底层"><a class="markdownIt-Anchor" href="#底层"></a> 底层</h3>
<h4 id="消息发送"><a class="markdownIt-Anchor" href="#消息发送"></a> 消息发送</h4>
<p>收发消息是最基本的功能，也是其他功能实现的基础，将其部署在最底层，封装成函数供服务调用。</p>
<p>分为<strong>私聊</strong>和<strong>群聊</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">msg,qq_id,qq_type</span>):</span><br><span class="line">	<span class="keyword">if</span> qq_type == <span class="string">&quot;private&quot;</span>:</span><br><span class="line">		data = &#123;</span><br><span class="line">			<span class="string">&#x27;user_id&#x27;</span>:qq_id,</span><br><span class="line">			<span class="string">&#x27;message&#x27;</span>:msg,</span><br><span class="line">			<span class="string">&#x27;auto_escape&#x27;</span>:<span class="literal">False</span></span><br><span class="line">		&#125;</span><br><span class="line">		cq_url = <span class="string">&quot;http://127.0.0.1:5700/send_private_msg&quot;</span></span><br><span class="line">		rev = requests.post(cq_url,data=data)</span><br><span class="line">	<span class="keyword">elif</span> qq_type == <span class="string">&quot;group&quot;</span>:</span><br><span class="line">		data = &#123;</span><br><span class="line">			<span class="string">&#x27;group_id&#x27;</span>:qq_id,</span><br><span class="line">			<span class="string">&#x27;message&#x27;</span>:msg,</span><br><span class="line">			<span class="string">&#x27;auto_escape&#x27;</span>:<span class="literal">False</span></span><br><span class="line">		&#125;</span><br><span class="line">		cq_url = <span class="string">&quot;http://127.0.0.1:5700/send_group_msg&quot;</span></span><br><span class="line">		rev = requests.post(cq_url,data=data)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	<span class="keyword">if</span> rev.json()[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;ok&#x27;</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="消息获取"><a class="markdownIt-Anchor" href="#消息获取"></a> 消息获取</h4>
<p>监听端口，获取收到的消息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">ListenSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">ListenSocket.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5701</span>))</span><br><span class="line">ListenSocket.listen(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">HttpResponseHeader = <span class="string">&#x27;&#x27;&#x27;HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">Content-Type: text/html\r\n\r\n</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_to_json</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">        <span class="keyword">if</span> msg[i]==<span class="string">&quot;&#123;&quot;</span> <span class="keyword">and</span> msg[-<span class="number">1</span>]==<span class="string">&quot;\n&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> json.loads(msg[i:])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需要循环执行，返回值为json格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev_msg</span>():<span class="comment"># json or None</span></span><br><span class="line">    Client, Address = ListenSocket.accept()</span><br><span class="line">    Request = Client.recv(<span class="number">1024</span>).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(Request)</span></span><br><span class="line">    rev_json=request_to_json(Request)</span><br><span class="line">    Client.sendall((HttpResponseHeader).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    Client.close()</span><br><span class="line">    <span class="keyword">return</span> rev_json</span><br></pre></td></tr></table></figure>
<h4 id="数据读出"><a class="markdownIt-Anchor" href="#数据读出"></a> 数据读出</h4>
<p>读出放在data文件夹中的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>():</span><br><span class="line">	data = []</span><br><span class="line">	<span class="keyword">for</span> count ,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(<span class="string">&quot;./data/talk_data/words&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)):</span><br><span class="line">		temp = line.strip().split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">		temp = [temp[<span class="number">0</span>],temp[<span class="number">1</span>].split(<span class="string">&quot;/&quot;</span>)[:-<span class="number">1</span>]]</span><br><span class="line">		data.append(temp)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_one</span>():</span><br><span class="line">	data = []</span><br><span class="line">	<span class="keyword">for</span> count ,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(<span class="string">&quot;./data/talk_data/oneword&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)):</span><br><span class="line">		temp = line.strip().split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">		temp = [temp[<span class="number">0</span>],temp[<span class="number">1</span>].split(<span class="string">&quot;/&quot;</span>)[:-<span class="number">1</span>]]</span><br><span class="line">		data.append(temp)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_imglist</span>():</span><br><span class="line">	img_list=[]</span><br><span class="line">	<span class="keyword">for</span> count,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(<span class="string">&quot;./data/imglist&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)):</span><br><span class="line">		temp = line.strip()</span><br><span class="line">		img_list.append(temp)</span><br><span class="line">	<span class="keyword">return</span> img_list</span><br></pre></td></tr></table></figure>
<h3 id="字符串处理层"><a class="markdownIt-Anchor" href="#字符串处理层"></a> 字符串处理层</h3>
<p>本地实现的字符串处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> data.load_data <span class="keyword">import</span> read_one</span><br><span class="line"><span class="keyword">from</span> data.load_data <span class="keyword">import</span> read_imglist</span><br><span class="line">group = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;group&quot;</span>]</span><br><span class="line">apikey= json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;apikey&quot;</span>]</span><br><span class="line">ban_words = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;ban_words&quot;</span>]</span><br><span class="line">mao_path = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;mao_path&quot;</span>]</span><br><span class="line">rr_path = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;rr_path&quot;</span>]</span><br><span class="line">key_words = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;key_words&quot;</span>]</span><br><span class="line"></span><br><span class="line">help_base = <span class="string">&quot;这里是帮助菜单：\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;1.发送猫猫图，返回一张猫猫表情包\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;2.发送若若爆照，可以看到我的自拍\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;3.发送城市+天气，获取城市天气\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;4.私聊调教对话 例如aaa+bbb \n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;那么发送aaa就会返回bbb啦~\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;可以发送rmaaa+bbb删除对话哦~\n&quot;</span></span><br><span class="line">help_base += <span class="string">&quot;快来和若若聊天吧~\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help_menu</span>(<span class="params">msg</span>):</span><br><span class="line">	<span class="keyword">if</span> msg == <span class="string">&quot;help&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">True</span>,help_base]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_data</span>(<span class="params">msg,all_data</span>):</span><br><span class="line">	one=<span class="literal">False</span></span><br><span class="line">	<span class="keyword">if</span> <span class="string">&quot;＋&quot;</span> <span class="keyword">in</span> msg:</span><br><span class="line">		<span class="keyword">return</span> add_sxt_data(msg,all_data)</span><br><span class="line">	<span class="keyword">if</span> msg.count(<span class="string">&quot;+&quot;</span>) != <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">&quot;|&quot;</span> <span class="keyword">in</span> msg:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;不能含有/或|呀~&quot;</span>]</span><br><span class="line">	<span class="keyword">if</span> msg.split(<span class="string">&quot;+&quot;</span>)[<span class="number">1</span>]==<span class="string">&quot;&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line">	msg = msg.split(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(msg[<span class="number">0</span>])&lt; <span class="number">2</span>:</span><br><span class="line">		one=<span class="literal">True</span></span><br><span class="line">		all_data=read_one()</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> all_data:</span><br><span class="line">		<span class="keyword">if</span> msg[<span class="number">0</span>] == row[<span class="number">0</span>]:</span><br><span class="line">			<span class="keyword">if</span> msg[<span class="number">1</span>] <span class="keyword">in</span> row[<span class="number">1</span>]:</span><br><span class="line">				<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;oh，这句话我已经会啦，不用再教我啦~&quot;</span>]</span><br><span class="line">			row[<span class="number">1</span>].append(msg[<span class="number">1</span>])</span><br><span class="line">			save_data(all_data,one)</span><br><span class="line">			<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;添加成功！&quot;</span>]</span><br><span class="line">	all_data.append([msg[<span class="number">0</span>], [msg[<span class="number">1</span>]]])</span><br><span class="line">	save_data(all_data,one)</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;添加成功！&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">all_data,one</span>):</span><br><span class="line">	<span class="keyword">if</span> one:</span><br><span class="line">		f=<span class="built_in">open</span>(<span class="string">&quot;./data/talk_data/oneword&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;./data/talk_data/words&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> all_data:</span><br><span class="line">		temp = row[<span class="number">0</span>]+<span class="string">&quot;|&quot;</span>+<span class="string">&quot;&quot;</span>.join([i+<span class="string">&quot;/&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> row[<span class="number">1</span>]])</span><br><span class="line">		f.writelines(temp+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_data</span>(<span class="params">del_data,all_data</span>):</span><br><span class="line">	one=<span class="literal">False</span></span><br><span class="line">	<span class="keyword">if</span> del_data[:<span class="number">2</span>] != <span class="string">&quot;rm&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&quot;＋&quot;</span> <span class="keyword">in</span> del_data:</span><br><span class="line">		msg = del_data[<span class="number">2</span>:].split(<span class="string">&quot;＋&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		msg = del_data[<span class="number">2</span>:].split(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(msg[<span class="number">0</span>])&lt;<span class="number">2</span>:</span><br><span class="line">		one=<span class="literal">True</span></span><br><span class="line">		all_data=read_one()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(all_data)):</span><br><span class="line">		<span class="keyword">if</span> msg[<span class="number">0</span>] == all_data[i][<span class="number">0</span>]:</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(all_data[i][<span class="number">1</span>]) == <span class="number">1</span>:</span><br><span class="line">				all_data.pop(i)</span><br><span class="line">				save_data(all_data,one)</span><br><span class="line">				<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;已经删除啦~&quot;</span>]</span><br><span class="line">			all_data[i][<span class="number">1</span>].remove(msg[<span class="number">1</span>])</span><br><span class="line">			save_data(all_data,one)</span><br><span class="line">			<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;已经删除啦~&quot;</span>]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;删除出错啦~&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mao_pic</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">if</span> msg <span class="keyword">in</span> [<span class="string">&quot;来张猫猫图&quot;</span>, <span class="string">&quot;来张猫图&quot;</span>, <span class="string">&quot;猫图&quot;</span>, <span class="string">&quot;喵图&quot;</span>, <span class="string">&quot;maomao&quot;</span>,<span class="string">&quot;猫猫图&quot;</span>,<span class="string">&quot;猫&quot;</span>,<span class="string">&quot;喵&quot;</span>,<span class="string">&quot;猫猫&quot;</span>]:</span><br><span class="line">        setu_list = os.listdir(mao_path)</span><br><span class="line">        local_img_url = <span class="string">&quot;[CQ:image,file=file://&quot;</span>+mao_path+choice(setu_list)+<span class="string">&quot;]&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="literal">True</span>, local_img_url]</span><br><span class="line">    <span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rr_pic</span>(<span class="params">msg</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&quot;若若爆照&quot;</span> <span class="keyword">in</span> msg:</span><br><span class="line">		setu_list = os.listdir(rr_path)</span><br><span class="line">		local_img_url = <span class="string">&quot;[CQ:image,type=flash, file=file://&quot;</span>+rr_path+choice(setu_list)+<span class="string">&quot;]&quot;</span></span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">True</span>, local_img_url]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_ban</span>(<span class="params">msg,user_id,group_id</span>):</span><br><span class="line">	<span class="keyword">if</span> group_id <span class="keyword">not</span> <span class="keyword">in</span> group:</span><br><span class="line">		<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> ban_words:</span><br><span class="line">		s = re.search(i,msg)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> s == <span class="literal">None</span>:</span><br><span class="line">			data = &#123;</span><br><span class="line">			<span class="string">&#x27;user_id&#x27;</span>:user_id,</span><br><span class="line">			<span class="string">&#x27;group_id&#x27;</span>:group_id,</span><br><span class="line">			<span class="string">&#x27;duration&#x27;</span>:<span class="number">60</span></span><br><span class="line">			&#125;</span><br><span class="line">			cq_url = <span class="string">&quot;http://127.0.0.1:5700/set_group_ban&quot;</span></span><br><span class="line">			requests.post(cq_url,data=data)</span><br><span class="line">			<span class="keyword">return</span> [<span class="literal">True</span>,<span class="string">&quot;不要说不该说的话啦~&quot;</span>]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>基于网络 api 接口的字符串处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_with_api</span>(<span class="params">msg</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=&#x27;</span> + msg</span><br><span class="line">    s = quote(url, safe=string.printable)</span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(s) <span class="keyword">as</span> response:</span><br><span class="line">        html = response.read()</span><br><span class="line">        <span class="comment"># 将获取到的响应内容进行解码，并将json字符串内容转换为python字典格式</span></span><br><span class="line">        <span class="comment"># 通过下标取到机器人回复的内容</span></span><br><span class="line">        <span class="keyword">with</span> urllib.request.urlopen(s) <span class="keyword">as</span> response:</span><br><span class="line">            html = response.read()</span><br><span class="line">        <span class="comment"># 将获取到的响应内容进行解码，并将json字符串内容转换为python字典格式</span></span><br><span class="line">        <span class="comment"># 通过下标取到机器人回复的内容</span></span><br><span class="line">            msg=<span class="built_in">eval</span>(html.decode(<span class="string">&quot;utf-8&quot;</span>))[<span class="string">&quot;content&quot;</span>].replace(<span class="string">&#x27;&#123;br&#125;&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            msg=msg.replace(<span class="string">&#x27;菲菲&#x27;</span>, <span class="string">&#x27;若若&#x27;</span>)</span><br><span class="line">            msg=msg.replace(<span class="string">&#x27;未获取到相关信息&#x27;</span>,<span class="string">&#x27;找若若有什么事吗？&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure>
<h3 id="服务层"><a class="markdownIt-Anchor" href="#服务层"></a> 服务层</h3>
<p>呈现所有对于私聊与群聊的服务。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> send_message.word_detect <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> data.talk_data.base_talk <span class="keyword">import</span> others_answer</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> data.load_data <span class="keyword">import</span> read_one</span><br><span class="line"><span class="keyword">from</span> func.api <span class="keyword">import</span> check_with_api</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">msg,talk_data</span>):</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">len</span>(msg)==<span class="number">1</span>):</span><br><span class="line">		talk_data=read_one()</span><br><span class="line">		<span class="keyword">return</span> match_oneword(msg,talk_data)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> talk_data:</span><br><span class="line">		<span class="keyword">if</span> row[<span class="number">0</span>] <span class="keyword">in</span> msg:</span><br><span class="line">			x=randint(<span class="number">0</span>,<span class="built_in">len</span>(row[<span class="number">1</span>])-<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> [<span class="literal">True</span>,row[<span class="number">1</span>][x]]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">False</span>,check_with_api(msg)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">match_oneword</span>(<span class="params">msg,talk_data</span>):</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> talk_data:</span><br><span class="line">		<span class="keyword">if</span> msg <span class="keyword">in</span> row[<span class="number">0</span>]:</span><br><span class="line">			x=randint(<span class="number">0</span>,<span class="built_in">len</span>(row[<span class="number">1</span>])-<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> [<span class="literal">True</span>,row[<span class="number">1</span>][x]]</span><br><span class="line">	<span class="keyword">return</span> [<span class="literal">False</span>,choice(others_answer[<span class="string">&quot;no_answer&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk_to_user</span>(<span class="params">rev,talk_data</span>):<span class="comment">#这里可以DIY对私聊和群聊中@白若的操作</span></span><br><span class="line">	msg=rev[<span class="string">&quot;raw_message&quot;</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------帮助页面</span></span><br><span class="line">	if_help = help_menu(msg)</span><br><span class="line">	<span class="keyword">if</span> if_help[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_help[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------删除数据</span></span><br><span class="line">	if_del = del_data(msg,talk_data)</span><br><span class="line">	<span class="keyword">if</span> if_del[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_del[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------添加数据</span></span><br><span class="line">	if_add = add_data(msg,talk_data)</span><br><span class="line">	<span class="keyword">if</span> if_add[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_add[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------发送自拍</span></span><br><span class="line">	if_setu = rr_pic(msg)</span><br><span class="line">	<span class="keyword">if</span> if_setu[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_setu[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#--------------------------------------------------------------------------------------发送猫猫图</span></span><br><span class="line">	if_setu = mao_pic(msg)</span><br><span class="line">	<span class="keyword">if</span> if_setu[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_setu[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">match</span>(msg,talk_data)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk_to_gourp</span>(<span class="params">rev,talk_data</span>):<span class="comment">#这里可以DIY对群聊的操作</span></span><br><span class="line">	msg=rev[<span class="string">&quot;raw_message&quot;</span>]</span><br><span class="line">	user_id=rev[<span class="string">&quot;user_id&quot;</span>]</span><br><span class="line">	group_id=rev[<span class="string">&quot;group_id&quot;</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------检测关键字禁言</span></span><br><span class="line">	if_ban = detect_ban(msg,user_id,group_id)</span><br><span class="line">	<span class="keyword">if</span> if_ban[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_ban[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------发送猫猫图</span></span><br><span class="line">	if_setu = mao_pic(msg)</span><br><span class="line">	<span class="keyword">if</span> if_setu[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_setu[<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#--------------------------------------------------------------------------------------发送自拍</span></span><br><span class="line">	if_setu = rr_pic(msg)</span><br><span class="line">	<span class="keyword">if</span> if_setu[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> if_setu[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">match</span>(msg,talk_data)[<span class="number">0</span>]==<span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">match</span>(msg,talk_data)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="domain层"><a class="markdownIt-Anchor" href="#domain层"></a> domain层</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> data.load_data <span class="keyword">import</span> read_file</span><br><span class="line"><span class="keyword">from</span> send_message.send_message <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> send_message.talk_to_user <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">self_qq = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;self_qq&quot;</span>]</span><br><span class="line">ban_words = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;ban_words&quot;</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">msg_talker</span>():</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">		self.talk_data = read_file()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">private_msg</span>(<span class="params">self,rev</span>):</span><br><span class="line">		<span class="keyword">if</span> rev[<span class="string">&quot;sub_type&quot;</span>] != <span class="string">&quot;friend&quot;</span>:</span><br><span class="line">			<span class="keyword">return</span> send_message(<span class="string">&#x27;你还不是我的好友呀&#x27;</span>,rev[<span class="string">&#x27;user_id&#x27;</span>],<span class="string">&quot;private&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> send_message(talk_to_user(rev, self.talk_data), rev[<span class="string">&quot;user_id&quot;</span>], <span class="string">&quot;private&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">group_msg</span>(<span class="params">self,rev</span>):</span><br><span class="line">		<span class="keyword">if</span> <span class="string">&quot;[CQ:at,qq=&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(self_qq) <span class="keyword">in</span> rev[<span class="string">&quot;raw_message&quot;</span>]:</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				rev[<span class="string">&#x27;raw_message&#x27;</span>]=rev[<span class="string">&#x27;raw_message&#x27;</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="keyword">pass</span></span><br><span class="line">			<span class="keyword">return</span> send_message(talk_to_user(rev, self.talk_data), rev[<span class="string">&quot;group_id&quot;</span>], <span class="string">&quot;group&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#		if randint(1,10)&lt;4 or rev[&#x27;raw_message&#x27;] in ban_words or rev[&#x27;raw_message&#x27;] in key_words:	</span></span><br><span class="line">		<span class="keyword">return</span> send_message(talk_to_gourp(rev, self.talk_data), rev[<span class="string">&quot;group_id&quot;</span>], <span class="string">&quot;group&quot;</span>)</span><br><span class="line">		</span><br><span class="line">		<span class="comment">#return True</span></span><br></pre></td></tr></table></figure>
<h3 id="功能层"><a class="markdownIt-Anchor" href="#功能层"></a> 功能层</h3>
<p>实现一些其它功能，例如群聊定时发送消息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> send_message.send_message <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_send</span>(<span class="params">h,m,s,msg,qq</span>):</span><br><span class="line">    now=datetime.datetime.now()</span><br><span class="line">    <span class="keyword">if</span>(now.hour==h <span class="keyword">and</span> now.minute==m <span class="keyword">and</span> now.second==s):</span><br><span class="line">        send_message(msg,qq,<span class="string">&quot;group&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="main"><a class="markdownIt-Anchor" href="#main"></a> main</h3>
<p>最后只要运行main函数就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> receive <span class="keyword">import</span> rev_msg</span><br><span class="line"><span class="keyword">from</span> send_message.send_message <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> massage_flide <span class="keyword">import</span> msg_talker</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">group = json.load(<span class="built_in">open</span>(<span class="string">&quot;./config.json&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&quot;group&quot;</span>]</span><br><span class="line"></span><br><span class="line">talker = msg_talker()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rev = rev_msg()</span><br><span class="line">        <span class="keyword">if</span> rev == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定时模块#</span></span><br><span class="line">    time.time_send(<span class="number">23</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="string">&quot;各位晚安啦，早睡早起身体好[CQ:face,id=75]&quot;</span>,qq群号)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#收发消息模块</span></span><br><span class="line">    <span class="keyword">if</span> rev[<span class="string">&quot;post_type&quot;</span>] == <span class="string">&quot;message&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(rev) <span class="comment">#需要功能自己DIY</span></span><br><span class="line">        <span class="keyword">if</span> rev[<span class="string">&quot;message_type&quot;</span>] == <span class="string">&quot;private&quot;</span>: <span class="comment">#私聊</span></span><br><span class="line">            talker.private_msg(rev)</span><br><span class="line">        <span class="keyword">elif</span> rev[<span class="string">&quot;message_type&quot;</span>] == <span class="string">&quot;group&quot;</span>: <span class="comment">#群聊</span></span><br><span class="line">            group_id=rev[<span class="string">&quot;group_id&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> group_id <span class="keyword">in</span> group:</span><br><span class="line">                talker.group_msg(rev)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> rev[<span class="string">&quot;post_type&quot;</span>] == <span class="string">&quot;notice&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> rev[<span class="string">&quot;notice_type&quot;</span>] == <span class="string">&quot;group_upload&quot;</span>:  <span class="comment"># 有人上传群文件</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> rev[<span class="string">&quot;notice_type&quot;</span>] == <span class="string">&quot;group_decrease&quot;</span>:  <span class="comment"># 群成员减少</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> rev[<span class="string">&quot;notice_type&quot;</span>] == <span class="string">&quot;group_increase&quot;</span>:  <span class="comment"># 群成员增加</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> rev[<span class="string">&quot;post_type&quot;</span>] == <span class="string">&quot;request&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> rev[<span class="string">&quot;request_type&quot;</span>] == <span class="string">&quot;friend&quot;</span>:  <span class="comment"># 添加好友请求</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> rev[<span class="string">&quot;request_type&quot;</span>] == <span class="string">&quot;group&quot;</span>:  <span class="comment"># 加群请求</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># rev[&quot;post_type&quot;]==&quot;meta_event&quot;:</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1>
<p>其实也就是一个小小的玩具，在开发的过程中也学到了很多东西。</p>
<p>写后端的时候合理的布局很重要。</p>
<p>欢迎大家来和若若聊天呀！</p>
<h2 id="功能介绍"><a class="markdownIt-Anchor" href="#功能介绍"></a> 功能介绍</h2>
<ol>
<li>私聊调教对话。</li>
<li>天气预报。</li>
<li>定时晚安。</li>
<li>发送自拍。</li>
<li>简单的对话。</li>
</ol>
<p><strong>更多功能正在开发中……</strong></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>聊天机器人</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Parallel CPP 学习笔记</title>
    <url>/2023/10/17/sycl-learn/</url>
    <content><![CDATA[<p>西交与清华北航杭电等高校合作的一个项目，做并行计算统一编程模型的，要用到实现 sycl 标准的 DPC++，所以就学习一下做个记录。</p>
<h2 id="01-introduction"><a class="markdownIt-Anchor" href="#01-introduction"></a> 01 introduction</h2>
<p>一些术语的简单描述。</p>
<ul>
<li><strong>队列与操作：</strong> 队列将连接到设备，我们将操作提交到队列中，从而进行计算或数据移动，行为是异步发生的。</li>
<li><strong>异构系统：</strong> 异构系统指包含多种类型计算设备的系统，比如同时有中央处理器 CPU 和图形处理单元 GPU 的系统。SYCL 是为了解决异构系统中数据并行编程挑战而设计的。</li>
<li><strong>主机：</strong> 程序从主机开始运行，大部分代码为主机编写。一般来说，主机就是 CPU。</li>
<li><strong>设备：</strong> 加速设备，sycl 将一些工作转移到加速设备上进行。</li>
<li><strong>内核代码：</strong> 设备端执行的代码称为内核代码。</li>
</ul>
<h3 id="lambda-表达式"><a class="markdownIt-Anchor" href="#lambda-表达式"></a> Lambda 表达式</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture-list](params)-&gt;ret body</span><br></pre></td></tr></table></figure>
<ul>
<li>capture-list 表示获取的变量，可以按值捕获 <code>[=]</code> ，也可以按引用捕获 <code>[&amp;]</code>，还可以空捕获 <code>[]</code>。</li>
<li>params 是参数列表。sycl 提供了一些参数来标识正在调用内核处理的元素：这可以是一维的 id，也可以是二维或三维的 id。</li>
<li>ret 是返回类型。</li>
<li>body 是函数体。</li>
</ul>
<h2 id="02-where-code-runs"><a class="markdownIt-Anchor" href="#02-where-code-runs"></a> 02 where code runs</h2>
<p>SYCL 程序可以是单个源文件，既包含在 CPU 上运行的主机代码，又包含在 SYCL 设备上运行的设备代码。</p>
<p>主机代码由操作系统启动 CPU 执行应用。设备对应加速器或处理器，在逻辑上独立于执行主机代码的 CPU。队列是一种将工作提交给设备执行的机制。</p>
<ul>
<li>主机端代码会<strong>异步</strong>执行。主机程序在 submit在设备上启动前 执行。</li>
<li>对设备代码有<strong>限制</strong>。设备代码不支持动态内存分配和运行时类型信息。</li>
<li>SYCL 定义的一些函数和查询只能在设备代码中使用。</li>
</ul>
<h3 id="设备的选择"><a class="markdownIt-Anchor" href="#设备的选择"></a> 设备的选择</h3>
<ol>
<li>不关心使用哪个设备时，随意在哪个地方运行设备代码均可。</li>
<li>在主机设备上显示地运行设备代码，这通常用于调试的时候，保证程序在没有设备的情况下也能跑起来。</li>
<li>将设备代码分配到 GPU 或加速器上。</li>
<li>将设备代码分配到异构设备集。如同时分配到 GPU 和 FPGA 上。</li>
<li>从更一般的设备类别中选择特定的设备。从一组可用的 FPGA 类型中选择特定类型的 FPGA。</li>
</ol>
<p>开发人员通常会使用方法 2 调试代码，并且只有在使用方法2对代码进行了实际测试后，才会使用方法 3-5 。</p>
<p><strong>队列</strong> 绑定到单个设备，提交给队列的工作是在该队列绑定的设备上执行的。程序中可以创建多个队列，让每个队列与不同设备绑定。多个不同的队列也可以绑定到单个设备上。构造队列时选择设备是通过设备选择器实现的。</p>
<p>设备代码的开发通常的方法，是在部署到高性能计算集群进行性能测试和优化之前，在本地系统上开发和测试设备代码。因此主机可以像任何加速器一样执行设备代码。</p>
<p>五种常用的内置选择器：</p>
<ul>
<li><code>default_selector</code> 默认选择设备</li>
<li><code>host_selector</code> 选择主机</li>
<li><code>cpu_selector</code> 选择 CPU 设备</li>
<li><code>gpu_selector</code> 选择 GPU 设备</li>
<li><code>accelerator_selector</code> 选择一个标识为 加速器 的设备，如 FPGA</li>
</ul>
<p>当设备选择失败时，会抛出<code>runtime_error</code>异常。</p>
<h2 id="03-data_management"><a class="markdownIt-Anchor" href="#03-data_management"></a> 03 data_management</h2>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>并行计算机体系结构笔记</title>
    <url>/2023/11/12/parallel-computer-architecture/</url>
    <content><![CDATA[<p>这是本学期的第一门闭卷考试，部分内容由我的研究生导师陈衡主讲，整理一下笔记。</p>
<p>其实之前和老师每周对话的时候问了一下，老师说师兄们去年都考得挺好的。</p>
<h2 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h2>
<p>计算机技术的发展需要<mark>计算机系统结构</mark>、硬件、软件、编程语言、高效应用算法通信技术等多方面发展。要改善计算机系统的性能，可以使用更合理、更快的硬件，也可以优化解决计算任务的算法，还可以使用<mark>多处理器计算机</mark>来解决特定任务。</p>
<p>硬件是物质基础，也是改善计算机性能最关键的因素，随着微电子技术的发展，芯片的集成度和处理速度日新月异。而<mark>计算机系统结构</mark>是改善计算机性能的极其重要因素，通过合理的新方法设计和构成综合性能指标最佳的计算机系统，可以最大限度地发挥硬件的内在潜力。</p>
<p>如果说硬件决定了计算机性能的上限，那么计算机系统结构则使得计算机的实际性能向着这个上限去逼近。</p>
<p>如何才能使计算机获得更强的计算能力？一方面当然是从硬件角度，增加处理器和存储部件的速度，但这会受到光速、热力学定律、处理器制造工艺以及制造成本的限制；另一方面，可以采用<mark>并行处理技术</mark>，连接多个处理器，使用它们合在一起的并行计算能力。</p>
<p><strong>并行处理技术可以构建高性能的计算机</strong>。</p>
<p><mark>时间</mark>并行的角度上，<mark>流水线技术</mark>使得功能部件得到充分利用，提高吞吐率，提高 n 个类似任务的处理速度。</p>
<p><mark>空间</mark>并行角度上，<mark>超标量和多处理机技术</mark>使得各部件并行协同工作，将一个任务划分成 n 个子任务/协同处理，提高一个任务的处理速度。</p>
<p><strong>并行处理技术可以很好地解决单个处理器瓶颈问题</strong>。</p>
<p>单核中性能变为原来的两倍，耗能变为原来的四倍。而多核可以在获取同样性能的同时，<mark>减少能量损耗</mark>。</p>
<p>全球高性能计算机性能排名 top500 第一名是 <mark>Frontier</mark> 。</p>
<p>目前计算机性能不足以满足应用要求，应用需要计算机解决的问题越来越复杂，规模也越来越大。</p>
<p>从传统 MPP 到集群/机器群再到虚拟现实、云计算等，网络技术的发展促进了计算机系统结构的发展。网络技术发展还促生了新的应用模式向信息化社会发展，大众而不是少数科学家也将成为高性能计算能力的使用者。</p>
<p>并行计算机将一个任务划分成多个子任务分别在多个处理器或计算机上同时处理，提高运算速度，突破单机系统性能的极限。容错计算机系统即使单个处理机节点故障，整个系统也可以继续降级使用，得到高可靠性。企业管理数据库系统通过共用存储器、大容量辅助外村和输入/输出设备，实现资源共享和协同。</p>
<h2 id="二-相关理论基础"><a class="markdownIt-Anchor" href="#二-相关理论基础"></a> 二、相关理论基础</h2>
<h3 id="计算机的并行性"><a class="markdownIt-Anchor" href="#计算机的并行性"></a> 计算机的并行性</h3>
<p>并行性措施使计算机逐步由低性能向高性能，计算机系统结构由低级向高级发展。</p>
<p>从执行程序的角度：</p>
<ul>
<li>指令内部并行
<ul>
<li>一条指令内部各个<mark>微操作之间</mark>的并行。</li>
</ul>
</li>
<li>指令间的并行
<ul>
<li>多条指令的并行执行，如<mark>超标量处理</mark>、<mark>超长指令处理</mark>等。</li>
</ul>
</li>
<li>任务或进程之间的并行</li>
<li>作业或程序之间的并行
<ul>
<li><mark>企业管理系统 MIS</mark>、<mark>分布式处理</mark>等</li>
</ul>
</li>
</ul>
<p>并行性开发的途径：通过合理有效的方法，提高速度和吞吐率。</p>
<ul>
<li><mark>时间</mark>重叠：重叠<mark>流水线</mark>的工作方式。</li>
<li><mark>空间</mark>重叠：重复设置<mark>硬件资源</mark>来提高可靠性或性能。
<ul>
<li>早期受限于硬件价格，资源重复的多机系统以提高可靠性为主。</li>
<li>现在的并行计算机和多机系统被大量用于提高系统的<mark>计算速度</mark>。</li>
</ul>
</li>
<li><mark>用户</mark>重叠：多用户<mark>资源共享</mark>，提高系统资源利用率。</li>
</ul>
<h3 id="计算机体系结构"><a class="markdownIt-Anchor" href="#计算机体系结构"></a> 计算机体系结构</h3>
<ul>
<li>基于<mark>指令流</mark>的体系结构：
<ul>
<li>指令由操作码和数据地址码组成。</li>
<li>指令流包括操作流与数据流，按控制流原理工作。</li>
<li>最基本最灵活的体系结构。</li>
<li>算法按<mark>时间映射</mark>成程序，<mark>难以实现大规模并行</mark>。</li>
</ul>
</li>
<li>基于数据流的体系结构：
<ul>
<li>面向单个算法设计，完成<mark>固定功能</mark>，最不灵活但最快。</li>
<li>流件由访问地址与地址操作组成，无数据操作命令。</li>
<li>算法按<mark>静态空间映射</mark>成 ASIC 电路，在数据流的过程中完成计算。</li>
</ul>
</li>
<li>基于构令流计算的体系结构：
<ul>
<li>提高了<mark>硬件的可重用性</mark>，前边的两种基于<mark>程序实现可重用性</mark>。</li>
<li>静态可重构：一次上电，全芯片烧写。</li>
<li>动态可重构：根据应用不同区域动态烧写。</li>
<li>具有指令流计算体系结构的灵活性，接近基于数据流计算体系结构的高效性。</li>
<li>算法按<mark>动态空间映射</mark>成 RC Device 电路，在构令流的过程中完成数据流计算。</li>
</ul>
</li>
</ul>
<p>时间映射模式工作的体系结构灵活、通用，但并行度有限，而空间映射模式工作的体系结构可以解决算法并行限制，扩大并行程度。<mark>并行、混合实现</mark>是未来发展趋势，一方面是从性能、成本、能耗角度考虑，另一方面是从自然问题求解是“时间+空间”的处理过程的角度考虑。</p>
<h3 id="概念分类模型"><a class="markdownIt-Anchor" href="#概念分类模型"></a> 概念分类模型</h3>
<h4 id="flynn-分类法"><a class="markdownIt-Anchor" href="#flynn-分类法"></a> Flynn 分类法</h4>
<ul>
<li>SISD 单指令流单数据流
<ul>
<li>由程序生成的一个单指令流，在任意时刻处理单独数据项。</li>
</ul>
</li>
<li>SIMD 单指令流多数据流
<ul>
<li>多 PU 执行相同命令，处理不同的数据。</li>
<li>如 GPU 下的矩阵向量计算。</li>
</ul>
</li>
<li>MISD 多指令流单数据流
<ul>
<li>每个PU执行不同指令，处理相同数据。</li>
<li>异构系统或流水处理。</li>
</ul>
</li>
<li>MIMD 多指令流多数据流
<ul>
<li>每个 PU 执行不同程序，产生不同指令流，处理不同的数据。</li>
</ul>
</li>
</ul>
<p>Flynn 分类只能描述算法时间映射的基于指令流的并行计算。</p>
<h3 id="并行计算机结构的技术模型"><a class="markdownIt-Anchor" href="#并行计算机结构的技术模型"></a> 并行计算机结构的技术模型</h3>
<p>基于指令流计算的并行计算机实现分类：</p>
<ul>
<li>并行向量处理机 PVP
<ul>
<li><mark>频繁访存</mark>，经过互连网访问 SM。SM、互连网络会成为瓶颈。</li>
<li><mark>交叉开关</mark>增加了网络延迟。</li>
<li><mark>扩展节点</mark>需要增加互连开关，极其困难。</li>
</ul>
</li>
<li>对称多处理机 SMP
<ul>
<li>每个处理器可同等地访问 SM、I/O 及 OS 服务。</li>
<li>使用<mark>高速缓存</mark>，有利于缓解 SM、互连瓶颈，开发较高并行度。</li>
<li>共享存储使得系统中的 P/C 不能太多，总线与交叉开关也难以扩展。</li>
</ul>
</li>
<li>大规模并行处理机 MPP
<ul>
<li>处理节点采用<mark>商品微处理器</mark>，缓解<mark>存储瓶颈</mark>。</li>
<li>有物理上的<mark>分布式局部存储器</mark>，解决<mark>存储瓶颈</mark>。</li>
<li>采用<mark>高通信带宽</mark>及低延迟的定制互连网络，解决<mark>互连瓶颈</mark>。</li>
<li>异步的 MIMD 机，程序由多个进程构成，每个进程都有私有空间，由进程<mark>传递消息</mark>，通过优化数据局部性，可缓解互连瓶颈。</li>
<li>能扩放至成百上千个处理器。</li>
</ul>
</li>
</ul>
<p>PVP、SMP 的可编程性好，可扩展性差；MPP 可编程性差，可扩展性好。</p>
<ul>
<li>分布共享存储多处理机 DSM
<ul>
<li>高速缓存目录 DIR 用于支持分布式存储的数据一致性、共享</li>
<li>DSM 在物理上由分布在各节点的 LM（本地内存） 形成一个共享存储器，对用户而言形成了一个单地址的编址空间。</li>
<li>比 MPP 编程容易。</li>
</ul>
</li>
<li>工作站集群 COW
<ul>
<li>最低成本的变形的 MPP</li>
<li>节点都属完整的工作站 PC 或 SMP</li>
<li>节点通过低成本商品网络互连</li>
<li>节点内有本地磁盘（MPP 无）</li>
<li>节点内<mark>网络接口松散耦合</mark>到 I/O 总线上（MPP 网络接口连到存储总线上，<mark>网络接口紧耦合</mark>）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>PVP</th>
<th>SMP</th>
<th>MPP</th>
<th>DSM</th>
<th>COW</th>
</tr>
</thead>
<tbody>
<tr>
<td>处理器类型</td>
<td>专用定制</td>
<td>商用</td>
<td>商用</td>
<td>商用</td>
<td>商用</td>
</tr>
<tr>
<td>互连网络</td>
<td>定制交叉开关</td>
<td>总线/交叉开关</td>
<td>定制网络</td>
<td>定制网络</td>
<td>商用网络</td>
</tr>
<tr>
<td>系统存储器</td>
<td>集中共享</td>
<td>集中共享</td>
<td>分布非共享</td>
<td>分布共享</td>
<td>分布非共享</td>
</tr>
<tr>
<td>地址空间</td>
<td>单地址空间</td>
<td>单地址空间</td>
<td>多地址空间</td>
<td>单地址空间</td>
<td>多地址空间</td>
</tr>
<tr>
<td>通信机制</td>
<td>共享变量</td>
<td>共享变量</td>
<td>消息传递</td>
<td>共享变量</td>
<td>消息传递</td>
</tr>
<tr>
<td>结构类型</td>
<td>MIMD</td>
<td>MIMD</td>
<td>MIMD</td>
<td>MIMD</td>
<td>MIMD</td>
</tr>
<tr>
<td>代表机器</td>
<td>Cray C-90、Cray T-90、银河1号</td>
<td>IBM R50、SGI  Power、曙光1号</td>
<td>Inter Paragon、IBM BlueGen、曙光-1000、太湖之光</td>
<td>standford DASH、Crayon T 3D</td>
<td>Berkeley NOW、Alpha Farm、天河1、2号</td>
</tr>
<tr>
<td>访存模型</td>
<td>UMA</td>
<td>UMA</td>
<td>NORMA</td>
<td>NUMA</td>
<td>NORMA</td>
</tr>
</tbody>
</table>
<h3 id="并行计算机的访存模型"><a class="markdownIt-Anchor" href="#并行计算机的访存模型"></a> 并行计算机的访存模型</h3>
<ul>
<li>均匀存储访问模型 UMA
<ul>
<li>特点：
<ul>
<li>共享物理存储器、单一地址空间。</li>
<li>访问任何存储字<mark>访问延迟一致</mark>（均匀）。</li>
<li>每台处理器可带有高速缓冲 Cache。</li>
<li>外设也可以一定形式共享。</li>
</ul>
</li>
<li>由于高度共享资源，称为<mark>紧耦合结构</mark>，技术实现有：
<ul>
<li>对称多处理机 SMP ：所有<mark>处理机同等访问</mark>所有 I/O 设备，同样地执行程序。</li>
<li>非对称多处理机：<mark>主处理器</mark>执行 OS 并操纵 I/O，<mark>从处理器</mark>只在主处理器监控之下执行用户代码。</li>
</ul>
</li>
<li>UMA 适用于通用或分时应用。</li>
</ul>
</li>
<li>非均匀存储访问模型 NUMA
<ul>
<li>特点：
<ul>
<li><strong>地址空间统一编址</strong>：存储器物理上分布在不同位置，所有存储器的集合组成全局地址空间。</li>
<li><strong>各处理器访问时间不同</strong>：<mark>非均一内存访问</mark>。访问本地存储器或群内共享存储器较快，访问外地存储器或全局共享存储器较慢。</li>
</ul>
</li>
<li>全高速缓存存储访问模型 COMA
<ul>
<li>无存储层次结构，全部高速缓存构成了全局地址空间。</li>
<li>利用分布的<mark>高速缓存目录D</mark>进行远程高速缓存的访问。</li>
<li>COMA 中的高速缓存容量一般都大于2级高速缓存的容量。</li>
<li>使用 COMA 时，数据开始时可任意分配，在运行时它最终被迁移到要用到它的地方。</li>
</ul>
</li>
<li>高速缓存一致性非均匀存储访问模型 CC-NUMA
<ul>
<li>使用基于目录的高速缓存一致性协议。</li>
<li>保留 SMP 结构易于编程的特定，也改善了 SMP 可扩展性问题。</li>
<li>实际上是一个分布共享存储的 DSM 多处理机系统。</li>
<li>程序员无需明确地在节点上分配数据，系统软硬件会自动将数据拷贝到它被使用的地方。</li>
<li>网络的主要通信是为<mark>高速缓存的一致性维护</mark>。</li>
</ul>
</li>
</ul>
</li>
<li>非远程存储访问模型 NORMA
<ul>
<li>所有存储器都是私有的，仅能由本地处理器所访问。</li>
<li>以小溪通信方式完成信息交换，对远程 Mem 不能直接访问。</li>
<li>没有网络、访存瓶颈，且不用维护数据一致性等，可以是巨大规模。</li>
</ul>
</li>
</ul>
<h3 id="并行计算性能分析模型"><a class="markdownIt-Anchor" href="#并行计算性能分析模型"></a> 并行计算性能分析模型</h3>
<h4 id="amdahl-定律"><a class="markdownIt-Anchor" href="#amdahl-定律"></a> Amdahl 定律</h4>
<p>适用于<mark>固定负载</mark>问题，即任务规模不变，分析计算速度的加速比。</p>
<ul>
<li>Tex ：系统改善后的全部执行时间。</li>
<li>T ：系统改善前的全部执行时间。</li>
<li>r：能进行改善部分所占的比例。</li>
<li>a：能进行改善部分改善的程度。</li>
</ul>
<p>改善后的执行时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>r</mi><mo stretchy="false">)</mo><mo>+</mo><mi>r</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Tex=T((1-r)+r/a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></p>
<p>性能提高衡量指标：加速比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>T</mi><mi>e</mi><mi>x</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>r</mi><mo stretchy="false">)</mo><mo>+</mo><mi>r</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=T/Tex=1/((1-r)+r/a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></p>
<p>实际中，一般问题规模越大，r 越大，加速效果越好，r 接近 1 时，加速比接近 a。</p>
<p><strong>结论1</strong>：加速效果与<mark>改进部分占总执行时间的比例</mark>有关。</p>
<p><strong>一道例题：</strong></p>
<p><img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/Amdahl.png" alt="Amdahl例题"></p>
<p>理想情况下，作业可以均匀分解为 P 个子任务，在 P 台处理机上运行。但实际中，并行处理中存在不可分解成分，系统将以串-并-串的方式运行，子任务划分存在不均匀情况，还有串-并切换、并行任务分发，数据传输、同步等待等非计算开销。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub><mo>=</mo><mfrac><msub><mi>T</mi><mi>s</mi></msub><mrow><msub><mi>t</mi><mi>s</mi></msub><mo>+</mo><mfrac><mrow><msub><mi>T</mi><mi>s</mi></msub><mo>−</mo><msub><mi>t</mi><mi>s</mi></msub></mrow><mi>p</mi></mfrac></mrow></mfrac><mo>=</mo><mfrac><mi>p</mi><mrow><mfrac><msub><mi>t</mi><mi>s</mi></msub><msub><mi>T</mi><mi>s</mi></msub></mfrac><mi>p</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><msub><mi>t</mi><mi>s</mi></msub><msub><mi>T</mi><mi>s</mi></msub></mfrac></mrow></mfrac><mo>=</mo><mfrac><mi>p</mi><mrow><mi>α</mi><mi>p</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_p=\frac{T_s}{t_s+\frac{T_s-t_s}{p}}=\frac{p}{\frac{t_s}{T_s}p+1-\frac{t_s}{T_s}}=\frac{p}{\alpha p+1-\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7045659999999998em;vertical-align:-0.8161349999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.5218849999999997em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.95445em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.466357142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:-0.13889em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8161349999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5322900000000002em;vertical-align:-0.7847900000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.5560099999999997em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9057000000000001em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:-0.13889em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.466357142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4868571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9057000000000001em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:-0.13889em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.466357142857143em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.23056em;"><span style="top:-2.3em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.5em;"></span><span class="mord mathnormal mtight">s</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4868571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7847900000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>假设处理机的数目增大到无穷，加速比上限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>α</mi></mfrac></mrow><annotation encoding="application/x-tex">S_p=\frac{1}{\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，与串行占比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 成反比。</p>
<p><strong>结论2</strong>：任务规模固定时，在某个处理器数时，会达到<mark>加速比上限</mark>，再增加处理器个数没有意义。</p>
<h4 id="gustafson-定律"><a class="markdownIt-Anchor" href="#gustafson-定律"></a> Gustafson 定律</h4>
<p>适用于<mark>可扩展问题</mark>，每个节点处理负载不变（时间不变），负载增加的处理时间加速比。</p>
<ul>
<li>n：处理器个数，即问题规模扩大 n 倍。</li>
<li>a：n 个处理器并行执行时，能改善部分的并行时间所占比例。</li>
<li>Tex：系统改善后的执行时间</li>
<li>T：系统改善前的全部执行时间</li>
</ul>
<p>加速比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub><mo>=</mo><mfrac><mi>T</mi><mrow><mi>T</mi><mi>e</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mi>n</mi></mrow><mn>1</mn></mfrac><mo>=</mo><mn>1</mn><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">S_p=\frac{T}{Tex}=\frac{(1-a)+an}{1}=1+(n-1)a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">a</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathnormal">a</span></span></span></span></p>
<p><strong>结论3</strong>：随着问题规模增加，如果每个处理器处理数据规模一定，即 a 不变，加速比和 n 有关。</p>
<h3 id="并行计算机粒度模型"><a class="markdownIt-Anchor" href="#并行计算机粒度模型"></a> 并行计算机粒度模型</h3>
<ul>
<li>粒度：衡量计算<mark>任务所含计算量</mark>的尺度。</li>
<li>R 表示程序执行时间，C 表示用于通信/访存的开销，用 <mark>R/C 比值</mark>衡量任务粒度大小尺度。
<ul>
<li>粗粒度：R/C 比值比较大。每个单位计算只需要少量的通信/访存。<mark>计算量大，通信/访存少</mark>。</li>
<li>细粒度：R/C 比值比较小。每个单位需要很大通信量和其它开销。<mark>计算量少，通信/访存多</mark>。</li>
</ul>
</li>
</ul>
<p>对软件而言，要提高计算速度，细粒度并行需要减少访问延迟、高带宽，而粗粒度并行性需要高处理性能。</p>
<ul>
<li>PVP、SMP
<ul>
<li>通信/访存带宽高，细粒度硬件平台。</li>
<li>适合细粒度/粗粒度并行任务。</li>
</ul>
</li>
<li>MPP、DSM、COW
<ul>
<li>通信带宽低，粗粒度硬件平台。</li>
<li>只适合粗粒度并行任务。</li>
</ul>
</li>
</ul>
<p>如果处理器计算速度快，数据访问或传输慢，适合用粗粒度计算，才能最大化发挥资源利用率，提高系统性能，加快并行程序执行速度。</p>
<p><strong>两台处理机系统的任务分配</strong></p>
<ul>
<li>M 为子任务总数</li>
<li>M-K、K为两台机器任务分配数</li>
<li>假设子任务之间都要进行同样数据交换</li>
</ul>
<p>总处理时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mi>R</mi><mo>∗</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><mi>K</mi><mo separator="true">,</mo><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><mi>K</mi><mo stretchy="false">)</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">=R*max(M-K,K)+C(M-K)K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，两台处理机上任务执行时间取最大，处理及内通信开销0，处理机间通信开销 C。</p>
<p><strong>结论</strong> ：当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi mathvariant="normal">/</mi><mi>C</mi><mo>&lt;</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">R/C&lt;M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时，把所有任务分配给同一台处理机，总处理时间最小；当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi mathvariant="normal">/</mi><mi>C</mi><mo>&gt;</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">R/C&gt;M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时，把任务平均地分配给两台处理机，总处理时间最小。任务分配参数分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">K=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">K=M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span>（M为奇数时，K尽可能接近 M/2）。</p>
<p><strong>N 台处理机系统的任务分配</strong></p>
<p>总处理时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><msub><mi>R</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mi mathvariant="normal">/</mi><mn>2</mn><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>R</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">(</mo><msup><mi>M</mi><mn>2</mn></msup><mo>−</mo><msub><mo>∑</mo><mi>i</mi></msub><msubsup><mi>K</mi><mi>i</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=R_{max}(K_i)+C/2\sum_iK_i(M-K_i)=R_{max}(K_i)+C/2(M^2-\sum_iK_i^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">/</span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.113818em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">K_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示分配给第 i 台处理机的任务。</p>
<ul>
<li>
<p>若所有任务分配给一台处理机，总处理时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mi>R</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">=R*M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>。</p>
</li>
<li>
<p>若所有任务平均分配给 N 台处理机，总处理时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>N</mi></mfrac><mo>+</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac><mo>−</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">=\frac{RM}{N}+\frac{CM^2}{2}-\frac{CM^2}{2N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
</li>
</ul>
<p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>N</mi></mfrac><mo>+</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac><mo>−</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mi>N</mi></mrow></mfrac><mo>≤</mo><mi>R</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">\frac{RM}{N}+\frac{CM^2}{2}-\frac{CM^2}{2N}\leq RM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>R</mi><mi>C</mi></mfrac><mo>≥</mo><mfrac><mi>M</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{R}{C}\geq\frac{M}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>加速比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mrow><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>N</mi></mfrac><mo>+</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac><mo>−</mo><mfrac><mrow><mi>C</mi><msup><mi>M</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mi>N</mi></mrow></mfrac></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mrow><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mi>N</mi></mfrac><mo>+</mo><mfrac><mrow><mi>M</mi><mi>C</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mi>N</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">=\frac{RM}{\frac{RM}{N}+\frac{CM^2}{2}-\frac{CM^2}{2N}}=\frac{2R}{\frac{2R}{N}+\frac{MC(N-1)}{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6611509999999998em;vertical-align:-0.7888199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.4519800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7888199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6495809999999997em;vertical-align:-0.7772499999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.4635500000000006em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0377857142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7772499999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>当 N 无限大时，加速比趋近于常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mrow><mi>M</mi><mi>C</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{2R}{MC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。</p>
<p><strong>结论</strong>：R/C 比 M/2 大，应尽量均分任务；R/C 比 M/2 小，应尽量只用一台处理机。</p>
<p>假设通信开销与处理机数目成正比例，执行时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mi>R</mi><mo>∗</mo><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">=R*Max(K_i)+CN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></p>
<p>若任务平均分配，当处理机数目从N加到 N+1 时，执行时间减少量为：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>N</mi></mfrac><mo>+</mo><mi>C</mi><mi>N</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>N</mi></mfrac><mo>−</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mo>=</mo><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo>−</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">(\frac{RM}{N}+CN)-(\frac{RM}{N+1}+C(N+1))=(\frac{RM}{N}-\frac{RM}{N+1})-C=\frac{RM}{N(N+1)}-C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p>
<p>当不减少时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msqrt><mfrac><mrow><mi>R</mi><mi>M</mi></mrow><mi>C</mi></mfrac></msqrt></mrow><annotation encoding="application/x-tex">N=\sqrt{\frac{RM}{C}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5913344999999999em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2486655000000002em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2086655em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width="400em" height="1.8800000000000001em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M983 90
l0 -0
c4,-6.7,10,-10,18,-10 H400000v40
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5913344999999999em;"><span></span></span></span></span></span></span></span></span>。</p>
<p>并行程序设计中应该尽量<mark>隐藏或减少通信开销</mark>：</p>
<ul>
<li>采用通信与计算过程重叠（<mark>流水并行</mark>）优化方法。</li>
<li>通过<mark>硬件/软件</mark>减少通信开销。</li>
</ul>
<p>要增加并行度，R/C 会变小；但为了避免通信开销太大，希望 R/C 足够大，可并行度会减少。</p>
<h3 id="roofline-模型"><a class="markdownIt-Anchor" href="#roofline-模型"></a> Roofline 模型</h3>
<ul>
<li>算力 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>：每秒最大浮点运算数。</li>
<li>带宽<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>：每秒最大访存带宽。</li>
<li>计算强度上限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><mi>π</mi><mi>β</mi></mfrac></mrow><annotation encoding="application/x-tex">I_{max}=\frac{\pi}{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，访存获取的单位数据最多可以用来进行多少次计算。</li>
<li>理论性能 P：算法模型在计算平台上能达到的理论峰值计算量。</li>
</ul>
<p><mark>算力决定屋顶高度，带宽决定房檐斜率。</mark></p>
<p><img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/roofline.png" alt="roofline模型"></p>
<p>当计算强度没有达到上限时，位于<mark>存储瓶颈区</mark>，主要是访存太慢，要优化访存，使得房檐变陡。</p>
<p>当达到理论峰值时，位于<mark>计算瓶颈区</mark>，主要是算力不够，要优化算法进一步发挥处理器性能，或换更好的处理器。</p>
<h2 id="三-多处理器-cache-一致性"><a class="markdownIt-Anchor" href="#三-多处理器-cache-一致性"></a> 三、多处理器 Cache 一致性</h2>
<h3 id="cache-一致性问题"><a class="markdownIt-Anchor" href="#cache-一致性问题"></a> Cache 一致性问题</h3>
<p>在单机系统中，写 Cache  会引发 Cache 与主存的数据不一致，当发生 I/O 读时，主存和 Cache 数据不同就导致了矛盾。一般可以通过<mark>直写法WT</mark>或<mark>回写法WB</mark>来解决。</p>
<ul>
<li>WT 在修改 Cache 的同时立即修改主存，访存写性能低，增加总线负载。</li>
<li>WB 被修改的Cache 在被替换时写回主存，使得长时间主存和Cache数据不一致，可靠性低。</li>
</ul>
<p>而在多机系统中，也存在数据的不一致。</p>
<ul>
<li><mark>共享数据写</mark>操作会引发Cache与主存以及Cache之间的数据不一致。</li>
<li><mark>进程迁移</mark>会读取不一致的数据。</li>
<li><mark>I/O操作</mark>将新的数据写入主存或直接从主存输出数据，会导致不一致。</li>
</ul>
<p>单纯的 WT 和 WB 不能保证多处理机的多副本一致性。</p>
<h3 id="cache-一致性维护策略"><a class="markdownIt-Anchor" href="#cache-一致性维护策略"></a> Cache 一致性维护策略</h3>
<p>及时更新或作废主存和其它 Cache 中的数据。</p>
<ul>
<li><mark>更新法</mark>，开销大，代价高，控制复杂，一般不用。
<ul>
<li>基于 WT</li>
<li>基于 WB</li>
</ul>
</li>
<li><mark>作废法</mark>。
<ul>
<li>基于 WT</li>
<li>基于 WB</li>
</ul>
</li>
</ul>
<p>要根据多处理机系统互连网络结构，采用不同的方法维护 Cache 之间、Cache 与主存一致性。</p>
<ul>
<li><mark>播写法</mark>，基于<mark>总线监听</mark>协议，广播写操作，适合总线结构。
<ul>
<li>某一 PE 修改自己内部 Cache 时，采用广播方法将内容及地址由公共总线发送。</li>
<li>其他 PE 要随时监听总线，一旦发现修改信息就记录下来，且进行相应处理。</li>
</ul>
</li>
<li><mark>目录表法</mark>，适合非总线互连网结构。
<ul>
<li>为 Cache 及主存建目录表，保存一致性所需的信息，指明副本位置、状态等。</li>
</ul>
</li>
</ul>
<h3 id="监听总线协议"><a class="markdownIt-Anchor" href="#监听总线协议"></a> 监听总线协议</h3>
<p>基于总线的多处理机系统中，处理器可通过总线检测到所有对存储器正在进行的活动，如果总线业务破坏了本地 Cache 数据块一致性状态，Cache 控制器就应该采取相应动作使本地副本更新或无效。</p>
<ul>
<li>基于 WT 策略
<ul>
<li>作废法：当 P1 修改其 Cache 中的 X 为 X‘ 后，直写主存，由总线使其他高速缓存中的 X 均无效。</li>
<li>更新法：当 P1 修改其 Cache 中的 X 为 X‘ 后，直写主存，总线广播 X’ 至其他高速缓存中。</li>
</ul>
</li>
<li>基于 WB 策略
<ul>
<li>作废法：当 P1 修改其 Cache 中的 X 为 X‘ 后，回写主存，由总线使其他高速缓存及主存中的 X 均无效。</li>
<li>更新法：当 P1 修改其 Cache 中的 X 为 X‘ 后，总线广播 X’ 至其他高速缓存中，而主存中 X 无效。</li>
</ul>
</li>
</ul>
<p>典型的一致性维护数据副本状态协议基于<mark>作废法</mark>，更新法开销大、代价高、控制复杂，一般不用。</p>
<h4 id="2-状态-cache-协议-si-协议"><a class="markdownIt-Anchor" href="#2-状态-cache-协议-si-协议"></a> 2 状态 Cache 协议    SI 协议</h4>
<p><img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/SI.png" alt="SI协议"></p>
<p>两状态没考虑唯一正确数据块的情况，只能先写回主存，再从主存读取数据块，效率低。</p>
<h4 id="3-状态-cache-协议-msi-协议"><a class="markdownIt-Anchor" href="#3-状态-cache-协议-msi-协议"></a> 3 状态 Cache 协议    MSI 协议</h4>
<img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/MSI.jpg" alt="MSI协议" style="zoom:50%;">
<p>三状态协议能很好地支持 Cache 之间的高速数据传递，但没有考虑程序执行过程中的特点。</p>
<h4 id="4-状态-cache-协议-mesi-协议"><a class="markdownIt-Anchor" href="#4-状态-cache-协议-mesi-协议"></a> 4 状态 Cache 协议    MESI 协议</h4>
<p>WT 策略每次都要修改主存，总线流量大；WB 策略在 Cache 写一次后，主存中内容就不一致。</p>
<p>考虑到顺序程序可能就写一次，循环程序不止写一次，为了减少发生失效的次数和各 Cache 的变换次数，基于程序执行特点，引出 <mark>Write-Once</mark> 思想。</p>
<ul>
<li>第一次写，采用 WT 。
<ul>
<li>有一个以上副本正确，针对顺序程序。</li>
</ul>
</li>
<li>而后的写，采用 WB 。
<ul>
<li>只有一个副本正确，针对循环程序。</li>
</ul>
</li>
</ul>
<p>为了区分第一次写，把三状态中的 M 分为两个状态。</p>
<ul>
<li>S：共享状态。多个 Cache 和主存一致。</li>
<li>I：无效状态。</li>
<li>E：只被写过一次。仅一个 Cache 和主存一致。</li>
<li>M：不止被写过一次。唯一正确的在该 Cache 中。</li>
</ul>
<p><img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/MESI.png" alt="MESI协议"></p>
<h4 id="5-状态-cache-协议-moesi协议"><a class="markdownIt-Anchor" href="#5-状态-cache-协议-moesi协议"></a> 5 状态 Cache 协议    MOESI协议</h4>
<p><mark>数据拥塞</mark>：当其他 CPU 请求数据时，S 状态下的哪一个 CPU 发送数据？</p>
<p>SMP 中，可以通过总线监听和总线使用权仲裁解决。</p>
<p>ccNUMA中，通过仲裁机制解决效率低、复杂、成本高。</p>
<p>因此提出增加一个特殊状态，由具有特殊状态的 Cache 发送数据。</p>
<p><strong>MOESI</strong>：在 MESI 的基础上引入 O 状态，对 S 状态进行重定义。</p>
<p><mark>唯一正确的 M 状态数据副本发送数据，状态变为 O，此后由 O 状态数据副本发送数据。</mark></p>
<ul>
<li>CPU 写操作、本地 Cache 命中，本地状态为
<ul>
<li>E 或 M：数据直接写入 Cache，状态改为 M。</li>
<li>S：数据直接写入 Cache，状态改为 M；同时其他 CPU 中该数副本 Cache 行状态从S变为 I。</li>
<li>O：数据直接写入 Cache，状态改为 M；同时其他 CPU 中该数副本 Cache 行状态从S变为 I。</li>
</ul>
</li>
<li>CPU A 写操作、本地 Cache 没命中，CPU B 中命中，B 的状态为
<ul>
<li>E：Cache 行状态改为 I；A 从主存申请一个 Cache 行写入数据，状态为 M。</li>
<li>S：Cache 行状态改为 I，同样副本的其他 CPU 数据副本也改为 I；A 从主存申请一个 Cache 行写入数据，状态为 M。</li>
<li>M：将数据回写主存，Cache 行状态改为 I。A 从主存申请一个 Cache 行写入数据，状态为 M。</li>
<li>O：将数据回写主存，Cache 行状态改为 I，同样副本的其他 CPU 数据副本也改为 I；A 从主存申请一个 Cache 行写入数据，状态为 M。</li>
</ul>
</li>
<li>CPU 读操作、本地 Cache 命中
<ul>
<li>数据从本地直接读取，状态不变。</li>
</ul>
</li>
<li>CPU A 读操作、本地 Cache 没命中，CPU B 命中，B 的状态为
<ul>
<li>M：Cache 行状态改为 O，同时 CPU B 将数据传送给 CPU A，CPU A状态改为 S。</li>
<li>O：Cache 行状态不变，同时 CPU B 将数据传送给 CPU A，CPU A状态改为 S。</li>
</ul>
</li>
</ul>
<p><strong>一个问题：为什么 I 状态第一次写就变成 M，不应该先变成 M 吗？</strong></p>
<p><mark>看图的描述</mark></p>
<img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/MOESI.png" alt="MOESI协议" style="zoom: 80%;">
<img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/MOESI2.png" alt="MOESI协议" style="zoom: 80%;">
<h3 id="目录表协议"><a class="markdownIt-Anchor" href="#目录表协议"></a> 目录表协议</h3>
<p>监听协议仅适合总线连接多处理机，互连网络连接的多处理机使用基于目录的协议。</p>
<p>目录记录共享数据的<mark>所有 Cache</mark>存数据行的位置与状态。</p>
<ul>
<li><strong>目录表</strong>：存放与共享数据块副本相关的数据（目录项），可以集中存放或分散存放。</li>
<li><strong>目录项</strong>：每个数据块一个目录项。
<ul>
<li>包含多个指向该数据块<mark>多个远程副本地址</mark>的指针。</li>
<li>一个<mark>重写位</mark>，用于说明是否有 Cache 被允许数据块写入。</li>
</ul>
</li>
<li><strong>基于目录的协议</strong>
<ul>
<li><mark>全映射目录</mark>、<mark>有限目录</mark>、<mark>链式目录</mark></li>
<li>不同目录协议差异在于目录表的格式及对目录表的管理。</li>
</ul>
</li>
</ul>
<h4 id="全映射目录"><a class="markdownIt-Anchor" href="#全映射目录"></a> 全映射目录</h4>
<p><mark>共享存储器</mark>中的目录里，每个目录项有 N 个<mark>处理机指针位</mark>和1个<mark>重写位 C</mark>。</p>
<ul>
<li>处理机指针位：表示相应处理机Cache中是否存在该数据块副本。</li>
<li>重写位：表示有且仅有一个处理机指针位为 1，且该处理机可对该块进行写操作。</li>
</ul>
<p>Cache 中，当使用 2 状态 SI 协议时，每个数据块有两个状态位。</p>
<ul>
<li>有效位</li>
<li>是否允许写位。</li>
</ul>
<p><img src="/common/img/loading.jpg" data-original="/2023/11/12/parallel-computer-architecture/%E5%85%A8%E6%98%A0%E5%B0%84%E7%9B%AE%E5%BD%95.png" alt="全映射目录"></p>
<p>当 P3 要求写单元 X 时：</p>
<ol>
<li>Cache 有效，但不允许写。</li>
<li>向包含 X 的存储器模块发送写请求，等待回应。</li>
<li>存储器模型向 C1、C2发送无效请求。</li>
<li>C1 和 C2 接到无效请求后，将对应块置为无效态，并向存储器模块发出回答信号。</li>
<li>存储器模块接到回答信号，清楚指向 C1 和 C2 的指针，重写位置 1，发允许写信号到 C3。</li>
<li>C3 接收到允许写信号，激活 P3 开始写 X 单元，更新 Cache 状态。</li>
<li>写完后，重写位复位 0。</li>
</ol>
<p>全映射目录速度快、效率高，但目录表大、空间浪费大。</p>
<h4 id="有限目录"><a class="markdownIt-Anchor" href="#有限目录"></a> 有限目录</h4>
<p>由于<mark>同时刻的副本数不会太多</mark>，可以限制数据块副本的数量，减少目录表大小。</p>
<p>因此也会产生数据块副本数目大于目录表项的问题，要采取<mark>目录副本指针替换算法</mark>。</p>
<p>有限目录表小、节省空间，但副本数较多时会降低效率，替换算法很关键。</p>
<h4 id="链式目录"><a class="markdownIt-Anchor" href="#链式目录"></a> 链式目录</h4>
<p>链式目录允许任意数目副本，通过链表实现副本指针的扩展。</p>
<p>对副本的查询、删除等操作按链式数据结构方法进行。</p>
<p>链式目录表占存储空间小，但查表时间长，为了加快链式查表过程，可以采用双向链。</p>
<p>链式目录表最小、副本数可扩展，但链表目录查询、删除开销大。</p>
<h3 id="ccnuma-的-mesif-协议"><a class="markdownIt-Anchor" href="#ccnuma-的-mesif-协议"></a> ccNUMA 的 MESIF 协议</h3>
<p>MESIF 协议 主要解决 ccNUMA 架构中 SMP 子系统之间 L3 Cache 一致性的问题。</p>
<p>在 ccNUMA 中使用<mark>目录表协议</mark>，不能使用总线监听协议。</p>
<p>MESIF 引入 F 状态：</p>
<ul>
<li>多个处理器 Cache 副本中只有 1 个 Cache 行状态为 F，其他为 S。</li>
<li><mark>Cache 行状态为 F 时，Cache 中数据与存储器一致。</mark></li>
<li>只有 F 状态的 Cache 行可以转发数据副本。</li>
<li>F 状态的数据副本被其他 CPU 拷贝时，新副本变为 F，老副本变为 S。</li>
<li>F 状态的数据副本被改写后，状态为 S 的其他副本置 I ，该 Cache 行变为 M。</li>
</ul>
<p>Cache 一致性维护中，关键是解决<mark>减轻网络负载</mark>和<mark>多副本同时写操作冲突</mark>问题。</p>
<p>对连续处理倾向的进程，作废法较好；对多个处理器频繁交换处理的进程，更新法较好。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>体系结构</tag>
      </tags>
  </entry>
</search>
